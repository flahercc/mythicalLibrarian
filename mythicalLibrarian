#! /bin/bash

# ***** WELCOME! Scroll further down to set the user settings. *****

 #mythicalLibrarian by Adam Outler
 #THU 4MAR2010 2127
 #email: outleradam@hotmail.com
 #Software the way it should be: Free and Open Source
 #Please contact me with any bug reports 
 #Tech Support: http://xbmc.org/forum/showthread.php?p=470402#post470402
 #Feature Request: http://xbmc.org/forum/showthread.php?t=65769
 
 #Intention:
 # This program is designed to be a user job in MythTV.  It can be called by creating a user job. It must have access to your MythTV recordings
 # This file should be placed in /usr/local/bin
 # The user job can be called as follows:
 # /usr/local/bin/mythicalLibrarian "%DIR%/%FILE%"
 #
 #Usage:
 #  mythicalLibrarian "Target File" "show name" "episode name" 
 #  eg. mythicalLibrarian "/home/myth/recordings/2308320472023429837.mpg" "South Park" "Here Comes the Neighborhood" 
 #  
 #Output-target
 # If an error occurs and the file cannot be moved, then no change will occur to the original file. If the Movedir
 # is full or not available, such as when running a NAS and the computer is disconnected from the network, the 
 # AlternateMoveDir will be used. If both of these dirs fail, the show will be SymLinked in the FailSafeDir.
 # You may elect to run the user job at a later time when the issue has been resolved.  Output dir and link type 
 # will depend  on user settings. The file name however, is preset to the most acceptable standard:
 #   Show Title - SxxExx (Episode Title).ext
 #
 #Symlinking:
 # When Symlinking is enabled, mythicalLibrarian will follow its normal mode of operation.  In MOVE mode, 
 # mythicalLibrarian will create a symlink from the new file in the same name and location of the old file.  In 
 # LINK mode, mythicalLibrarian will not move the file, LINK mode creates a new symlink to the original file. 
 # 
 #Output-Files
 # mythicalLibrarian will create several files in it's working folder.  This is a list of the files and their functions.
 # -created.tracking-keeps track of created comskip.txt and NFO files so they can be deleted in the future if their video file
 # is deleted.
 # -doover.sh is designed to keep track of failed jobs.  It is designed to be executable.  #Commented commands are 
 # those which are determined to be questionable.  This file can be made executable and ran after a problem is corrected
 # which caused the problem. Questionable commands are those which will require you to add a episode title and set the
 # mythicalLibrarian Database=Disabled setting.  Questionable files do not have sufficient guide data.
 # -markupstart.txt and markupstop.txt are files which contain information from the last comskip generation.
 # Deletion will cause no adverse effects.
 # -output.log keeps track of operations and can be used to determine problems.
 # -shn.txt, sid.txt, and working.xml are used each time to determine the name and show id of the last show identified.
 # -The DailyReport folder is used to log the files which were moved that day.  It can be used as a "program guide" of sorts
 # to keep track of what has been added to your library.
 #
 #Logging:
 # Log file will show information for troubleshooting. You can find the log file in the working folder
 # Log file default location: /home/mythtv/.mythicalLibrarian/output.log
 #
 #Database-external:
 # This program will make 3 calls to TheTvDb for every episode.  The first one is to obtain the series ID and verify the show
 # name is correct.  The seccond is to check if the internally managed database is up-to-date.  The third call will only be
 # made if the internal database is not up-to-date.  The third call will download a larger file which contains all information
 # about the show which is known on TheTvDb.
 #
 #Database-internal:
 # While mythicalLibrarian maintains and requires it's own external file/folder database in the working directory, there is 
 # also support for integration with MythTV's internal database.  MythTV Database is required for movies to be recognized and 
 # handled by mythicalLibrarian. Also, in the event that the integrated fuzzy logic cannot make a determination of the 
 # correct show name, mythicalLibrarian will pull the original air date from the MythTV database and attempt to make an 
 # exact match to theTvDb.com supplied data. In addition, the type of program is extracted from the mythtv database and a 
 # determination is made weather or not there is sufficient information available to identify the show based upon guide data
 # In order to make mythicalLibrarian work to it's full potential, all settings must be filled out correctly under the 
 # database section of the user settings. Currently, the only guide data supported is schedulesdirect through mythtv. When
 # updating mythicalLibrarian it is best to delte all database folders to ensure proper data formatting.
 #
 #Dependencies: depends on "curl", "agrep", "libnotify-bin" and Mythtv Backend for database access.
 # install curl with "apt-get install curl"  -curl downloads webpages and sends commands to XBMC 
 # install agrep with "apt-get install agrep"  -agrep provides fuzzy logic
 # optional: install libnotify-bin with "apt-get install libnotify-bin" -allows GNOME desktop notifications
 #
 #Ubuntu Notifications:
 # In order for mythicalLibrarian to send notifications to the GNOME desktop, it must have no-password sudo access.  It uses
 # this access strictly to send complete, moving and failure status notifications.  Because this program is launched by the
 # user mythtv under normal circumstances, mythtv must temporarily become your user name in order to send a notification to
 # your desktop. This requires the use of a separate script, and for mythtv to have a sudoers group with no password option.
 # Notifications are an optional feature and will only work on the MythTV backend computer.  The librarian-notify-send script
 # should be located in /usr/local/bin.  You can get this script here:
 # https://sourceforge.net/projects/mythicallibrari/files/mythicalLibrarianBeta/librarian-notify-send/download
 #
 #XBMC Notifications:
 # If options are enabled, mythicalLibrarian will send a http requests to a specified XBMC Server to display library updates,
 # to update the library and to clean out the library.  In order for this to work XBMC you must ensure that the setting in 
 # XBMC under System->Network->Services->Allow control of XBMC via HTTP and Allow programs on other systems to control XBMC
 # are enabled.  

 
 #Show Name Translation
 # The user may elect to create a file in the mythicalLibrarian/ working folder which will then translate any recorded
 # show name into the desired show name.  This is useful for adding a year to distinguish between a new series
 # and an older series and/or typos in your guide data.  By default it should be called "showtranslations" and
 # it will be in your home/username/mythicalLibrarian folder.  showtranslations is not needed by most users and the file 
 # should only be created if it is needed. Under most circumstances, the integrated fuzzy logic will be 
 # sufficient to translate the guide name to the TvDb name, however showtranslations is available to improve 
 # accuracy to 100%. The format of showtranslations is as follows:
 #Filename: /home/mythtv/.mythicalLibrarian/showtranslations
 ##############################################################
 #My Guide Show Title = www.TheTvDb.com Show Title            #
 #Battlestar Gallactica = Battlestar Gallactica (2003)        #
 #The Office = The Office (US)                                # 
 #Millionaire = Who Wants To Be A Millionaire                 #
 #Aqua teen Hungerforce = Aqua Teen Hunger Force              #
 ##############################################################
 
 #######################USER SETTINGS##########################
 ###Stand-alone mode values###
 #SYMLINK has 3 modes.  MOVE|LINK|Disabled: Default=MOVE
 #Create symlink in original dir from file after 'MOVE' | Do not move, just create a sym'LINK' | move the file, symlinking is 'Disabled'
 SYMLINK=MOVE
 #MoveDir is the folder which mythicalLibrarian will move the file.  No trailing / is accepted eg. "~/videos"
 MoveDir="/home/mythtv/Episodes"  #<------THIS VALUE MUST BE SET-------
 #AlternateMoveDir will act as a seccondary MoveDir if the primary MoveDir fails.  No trailing / is accepted eg. "~/videos"
 AlternateMoveDir=/home/mythtv/Episodes
 #If UseOriginalDir is Enabled, original dir will override MoveDir.  Useful for multiple recording dirs.
 #UseOriginalDir will separate generic shows from episodes and movies. Enabled|Disabled
 UseOriginalDir=Enabled
 #When Enabled, mythicalLibrarian will move the file to a folder of the same name as the show. This is not affected by UseOriginalDir. Enabled|Disabled
 UseShowNameAsDir=Enabled
 #Internet access Timeout in seconds: Default Timeout=50 (seconds)
 Timeout=50
 #Update database time in secconds, Longer duration means faster processing time and less strain on TheTvDb. Default='84000' (1 day)
 UpdateDatabase=1
 #mythicalLibrarian working file dir: Default=~/mythicalLibrarian (home/username/mythicalLibraian)
 mythicalLibrarian=~/.mythicalLibrarian
 #FailSafe mode will enable symlinks to be formed in FailSafeDir if the move or symlink operation fails. Enabled|Disabled
 FailSafeMode=Enabled
 #FailSafeDir is used when the file cannot be moved to the MoveDir. FailSafe will not create folders. eg. /home/username
 FailSafeDir="/home/mythtv/FailSafe"  #<------THIS VALUE MUST BE SET-------
 #DirTracking will check for and remove the folders created by mythicalLibrarian
 DirTracking=Enabled
 #the following line contains the API key from www.TheTvDb.Com. Default project code: 6DF511BB2A64E0E9
 APIkey=6DF511BB2A64E0E9
 #Language setting
 Language=en
  
 ###Database settings### 
 #MythTV MYSQL access allows addition of movies, comskip data, and improves accuracy of episode recognition.
 #Database access Enabled|Disabled
 Database=Enabled
 #Database Type Default=MythTV
 DatabaseType=MythTV
 #Guide data type: SchedulesDirect currently covers DataDirect, MC2XML and others.
 GuideDataType=SchedulesDirect
 #MySQL User name: Default="mythtv"
 MySQLuser="mythtv" 
 #MySQL Password: Default="mythtv"
 MySQLpass="mythtv" #<------THIS VALUE MUST BE SET-------
 #MySQL Myth Database: Default="mythconverg"
 MySQLMythDb=mythconverg
 #Primary Movie Dir. mythicalLibrarian will attempt to move to this dir first. No trailing / is accepted eg. "~/videos"
 PrimaryMovieDir="/home/mythtv/Movies" #<------THIS VALUE MUST BE SET-------
 #AlternateMoveDir will act as a Seccondary move dir if the primary moive dir fails
 AlternateMovieDir="/home/mythtv/Movies"
 #ShowStopper = Enabled prevents generic shows and unrecognized episodes from being processed
 ShowStopper="Enabled"
 #Primary Show Dir. mythicalLibrarian will attempt to move to this dir first. No trailing / is accepted eg. "~/videos"
 PrimaryShowDir="/home/mythtv/Showings" #<------THIS VALUE MUST BE SET-------
 #AlternateMoveDir will act as a Seccondary move dir if the primary moive dir fails
 AlternateShowDir="/home/mythtv/Showings" #<------THIS VALUE MUST BE SET-------
 #CommercialMarkup will generate comskip files for recordings when they are moved. Enabled|Disabled
 CommercialMarkup=Enabled
 #CommercialMarkupCleanup will execute a maintenance routine which will remove comskip files if they are not needed
 CommercialMarkupCleanup=Enabled

 ###Reporting/Communications###
 #Enables debug mode.  This is a verbose mode of logging which should be used for troubleshooting.  Enabled|Disabled
 DEBUGMODE=Enabled
 #DailyReport provides a local log of shows added to your library per day. Enabled|Disabled
 DailyReport=Enabled
 #Notify tells mythicalLibrarian to send a notification to GNOME Desktop upon completion. Enabled|Disabled
 Notify=Enabled
 #If notifications are enabled, NotifyUserName should be the same as the user logged into the GNOME Session. (your username)
 NotifyUserName="MYUSERNAME" #<------THIS VALUE MUST BE SET-------
 #Send a notification to XBMC to Update library upon Successful move job Enabled|Disabled
 XBMCUpdate=Enabled
 #Send a notification to XBMC to cleanup the library upon Successful move job Enabled|Disabled
 XBMCClean=Enabled
 #Send Notifications to XBMC UI when library is updated Enabled|Disabled
 XBMCNotify=Enabled
 #Ip Address and port for XBMC Notifications Eg.XBMCIPs=( "192.168.1.110:8080" "192.168.1.111:8080" "XBOX:8080" )
 XBMCIPs=( "192.168.1.110:8080" "XBOX:8080" ) #<------THIS VALUE MUST BE SET-------
 #maxItems controls the number of items in the RSS. RSS Can be activated by creating a folder in /var/www/mythical-rss.  
 maxItems=8  

 #########################USER SETTINGS##########################
 ########################## USER JOBS############################
 #The RunJob function is a place where you can put your custom script to be run at the end of execution
 #Though it may be at the top, this is actually the end of the program.  
 RunJob () {
 	case $jobtype in
 #Successful Completion of mythicalLibrarian
 		LinkModeSuccessful|MoveModeSuccessful)
 			echo "SUCCESSFUL COMPLETION TYPE: $jobtype"
 			#Insert Custom User Job here 
 			
 			#
 			exit 0
 			;;

 #Information error occoured
 		TvDbIsIncomplete)
 			echo "INSUFFICIENT INFORMATION WAS SUPPLIED:$jobtype"
  			#Insert Custom User Job here 
 			
 			#
  			exit 0
 			;;

  #File system error occoured
 		PermissionError0Length|InvalidFileNameSupplied|PermissionErrorWhileMoving|FailSafeModeComplete|LinkModeFailed)
 			echo "FILE SYSTEM ERROR:$jobtype"
 			#Insert Custom User Job here 
 			
 			#
   			exit 1

 			;;
 #Generic error occoured
  		GenericUnspecifiedError)
  			echo "UNKNOWN ERROR OCCOURED:$jobtype"
  			#Insert Custom User Job here  
 			
 			#
  			exit 2 
 			;;

 		NameCouldNotBeAssigned)
 		 	echo "NAME COULD NOT BE ASSIGNED BASED UPON DATA SUPPLIED"
 			#Insert Custom User Job here
 			
			#
			exit 3
			;;
 	 esac
 #Custom exit point may be set anywhere in program by typing RunJob on any new line
 #Insert Custom User Job here 
 
 	#
 	exit 4
 }
 
 ########################## USER JOBS############################
 ################################################################
 ############Adept personel only beyond this point###############
 ################################################################


 #The following is a list of variables which can be used as a part of user jobs at the end of mythicalLibrarian
 #Suggested examples are:
 #1.string together multiple versions of mythicalLibrarian configured for different languages. Set a different
 #Language for each, then on failure, call the next job.
 #2.custom name replacement of certain programming
 #3.custom file moving of certain programming
 #4.set custom folders based upon recorded channel
 #5.set custom user jobs based upon who ran the file
 #6.make a "new movies" "old movies" folder. 
 #The limits are endless.
 
 #####ALL RECORDINGS####
 #$MoveDir/$ShowFileName.$originalext = location of moved file.
 #$ShowName = Processed Title
 #$InputTitle = actual database title
 #$MoveDir = the folder to which the file was moved ie. "/home/mythtv/videos/Episode"
 #$ShowFileName = the name of the show moved, not including extension eg. "simpsons S01E02 (foo)" or "MovieTitle(year)"
 #$originalext = original file extension  eg "mpg"
 #$NewShowName = Successfully resolved show name
 #$ChanID = ChannelID
 #$ProgramID= Zap2it listing
 #$ShowStartTime = begin recording time
 #$ShowCategory = category like children or sports
 #$mythicalLibrarianProgramIDCheck = "SH" for SHow or sports - "MV" for MoVie - "EP" for EPisode
 #$plot = plot
 #$stars = stars
 #$FileBaseName = name of the file to be moved without ext 
 #$XMLTVGrabber = your guide data type
 #$ProgramIDType= Generic episode with no data, Movie, or Series With Episode Data
 #$Zap2itSeriesID= Zap2it ID with SH, MV or EP stripped
 #$MyUserName = name of user running mythicalLibrarian

 ####EPISODES AND GENERIC SHOWS####
 #$OriginalAirDate = original air date  Generic programming will be the first episode ever, for episodes it will be the first aired date
 #$epn = Subtitle or EPisode Name

 #####EPISODES####
 #$exx = Episode Number or "Movie" in case of a movie
 #$sxx = Season number or blank in case of movie
 #$seriesid = TheTVDB series ID
 #$TvDbTime = current tvdb time
 #$LastUpdated = last updated time (for Episodes only others wil be blank) 
 #$absolouteEpisodeNumber = tvdb order numbering

 ####MOVIES####
 #$MovieAirDate = the original year the movie aired



 #########BEGIN FUNCTIONS HERE#########
 TraditionalNamingConventions () {
 #Format Episodes showname=show name sxx=season number exx=episode number epn=episode name
 	if [ "$exx" != "" ]; then
 		 ShowFileName=`echo "$NewShowName $sxx$exx ($epn)"`
 	
 #Format Movies
 	elif [ "$mythicalLibrarianProgramIDCheck" = "MV" ]; then
 		exx="Movie"
 		MoveDir="$PrimaryMovieDir"
  		ShowFileName=`echo "$NewShowName ($MovieAirDate)"` 
	
 #Format generic Shows
 	elif [ "$mythicalLibrarianProgramIDCheck" = "SH" ]; then
  		exx="Generic"
 		MoveDir="$PrimaryShowDir"
	  	ShowFileName=`echo "$ShowName S0E0 (Recorded $datehour on $ChanID)"`
 		RequiresNFO=1 
	 
 	fi
 }
 
 CategoricNamingConventions () {
 
 #Method1 - use airdate for season

 if [ "${OriginalAirDate:0:4}" != "0000" ]&& [ "${OriginalAirDate:0:4}" != "" ] ; then
 	 EventYear="${OriginalAirDate:0:4}"
 	 sxx=$EventYear
 	 EventMonthDay=`echo "${OriginalAirDate:5:5}"|tr -d "-"|sed 's/0*//'`
 	 exx=$EventMonthDay
 #Check validity of Method1
         
 fi
 test "$EventMonthDay" != "" && test "$EventYear" -gt "1900" && test "$EventMonthDay" -gt "0" && testedmethod1=1 || testedmethod1=0
 
 #Method2
 if [ "$testedmethod1" != "1" ]; then
 	test "${ShowStartTime:0:4}" != 0000 && test "${ShowStartTime:0:4}" != "" && EventYear="${ShowStartTime:0:4}" && EventMonthDay=`echo "${ShowStartTime:5:5}"|tr -d "-"|sed 's/0*//'`
	  exx=$EventMonthDay
	  sxx=$EventYear
 #Check validity of Method2 
 fi
  	
 test "$EventYear" -gt "1900" && test "$EventMonthDay" -gt "0" && ShowFileName="$NewShowName S$EventYear""E$EventMonthDay ($InputSubtitle Recorded $datehour)"

 RequiresNFO=1 
 HasSxxExx=1

#debug
 mythicalEpiShow=1


 }

 ######DAILY REPORT#####
 #This function reports all shows processed based on date
 dailyreport () {
 	if [ $DailyReport = Enabled ]; then
 		test ! -d "$mythicalLibrarian/DailyReport" && mkdir "$mythicalLibrarian/DailyReport" 
 		reportfilename=`date +%Y-%m-%d`
 		reporttime=`date +%T`
     		echo "$reporttime - $ShowFileName">>"$mythicalLibrarian/DailyReport/$reportfilename"
 	fi
 	return 0
 }
  
 #####CHECK PERMISSIONS#####
 #CheckPermissions by writing a small file then deleting it, checking along the way.
 #CheckPermissions takes file size, free space on dir, and the dir, then it performs
 #tests.  the result will be $TMoveDirWritable as a 1 or a 0 for writable or not.
 checkpermissions () { 
 	TMoveDirWritable=0
 	if [ "$2" != "" ] && [ "$1" != "" ] && [ $1 -lt $2 ]; then
 		echo "Testing write permission on $3">$3/arbitraryfile.ext 
 		if [ -f "$3/arbitraryfile.ext" -a -s "$3/arbitraryfile.ext" ]; then
 			rm -f "$3/arbitraryfile.ext"
 			test ! -f "$3/arbitraryfile.ext" && TMoveDirWritable=1 || TMoveDirWritable=0
 		else
 			TMoveDirWritable=0
 			echo "CHECK PERMISSIONS ON $MoveDir"
 		fi
 	elif [ -z "$2" ] || [ $1 -ge $2 ]; then
 	 	TMoveDirWritable=0
	 	echo "UNUSABLE SPACE-CHECK:$3"
	fi
 	return 0
 }
 
 #####FUZZY LOGIC RECOGNITION OF SERIES#####
 #This function provides fuzzy logic matching of a show name and returns a seriesid
 FuzzySeriesMatch () {

 	showname=`echo "$ShowName"|replace "&amp;" "&"`
 	serieslinenumber=`agrep -Byn "${showname:0:27}" "$mythicalLibrarian/shn.txt"|sed 's/:.*//'|grep -m1 ^`
 
 #Get the seriesid based on the showname
  	seriesid=`sed -n $serieslinenumber'p' "$mythicalLibrarian"/sid.txt| grep -m1 ^`
 	NewShowName=`sed -n $serieslinenumber'p' "$mythicalLibrarian"/shn.txt|replace "&amp;" "&"| tr -d '"<>:!\|/'|grep -m1 ^`
 	return 0
 }

 #####COMSKIP FILES#####
 #Function GenComSkip creates a comskip.txt file for use with the show upon moving, created from data from library
 GenComSkip () {
 	mythicalLibrarianCounter=1
 
 #Set up comskip file
 	test -f "$mythicalLibrarian/markupframes.txt" && rm -f "$mythicalLibrarian/markupframes.txt"
 	echo "FILE PROCESSING COMPLETE">"$mythicalLibrarian"/markupframes.txt
 	echo "------------------------">>"$mythicalLibrarian"/markupframes.txt	
 	while read line
 		do
 		mythicalLibrarianCounter=`expr $mythicalLibrarianCounter + 1`;
 		StartData=`sed -n "$mythicalLibrarianCounter"p "$mythicalLibrarian/markupstart.txt"`
 		StopData=`sed -n "$mythicalLibrarianCounter"p "$mythicalLibrarian/markupstop.txt"`
 		if [ ! -z "$StopData" ]; then
 			echo "$StartData $StopData">>"$mythicalLibrarian"/markupframes.txt
 			CommercialMarkup="Created"
 			echo "COMMERCIAL DATA START:$StartData STOP:$StopData"
 		fi
 	done <"$mythicalLibrarian/markupstop.txt"
 	return 0
 }
 
 

 
 
 #####XBMC COMMUNICATIONS#####
 #This function Automates communication with XBMC  
 XBMCAutomate () {
 #Send notification to XBMC, Update Library, Clean Library
 
 if [ "$XBMCNotify" = "Enabled" ] || [ "$XBMCUpdate" = "Enabled" ] || [ "$XBMCClean" = "Enabled" ]; then
  	for XBMCIP in ${XBMCIPs[@]}
 	do
 		echo "SENDING REQUESTED COMMANDS TO:$XBMCIP"
 		test "$XBMCNotify" = "Enabled" && curl -s -m1 "http://"$XBMCIP"/xbmcCmds/xbmcHttp?command=ExecBuiltIn(Notification(mythical%20Librarian%2Cadding%20show%20$tvdbshowname%20to%20library))" > /dev/null 2>&1
 		test "$XBMCUpdate" = "Enabled" && curl -s -m1 "http://"$XBMCIP"/xbmcCmds/xbmcHttp?command=ExecBuiltIn(UpdateLibrary(video))" > /dev/null 2>&1
 		test "$XBMCClean" = "Enabled" && curl -s -m1 "http://"$XBMCIP"/xbmcCmds/xbmcHttp?command=ExecBuiltIn(CleanLibrary)" > /dev/null 2>&1
 	done
 	fi
 	return 0
 }
 
 
 #####GENERATE RSS ENTRY#####
 #This function generates an RSS feed for use on the web server.  This can be used in /home/xbmc/.xbmc/userdata/RssFeeds.xml
 #replace the feeds.feedburner.com link with <feed updateinterval="30">http://[youripaddress]/mythical-rss/rss.xml</feed>  
 #Big thanks to barney_1!
 
 generaterss() {
 
 #user settings:
 	rssDir="/var/www/mythical-rss"
 	maxItems=8	#maximum number of items to read into the feed
 
 #script settings
 	OLDrssFile="rss.xml"
 	TEMPrssFile="rss.temp"
 
 #HTML line break code for nice formatting
 	lineBreak="&lt;br /&gt;"	

 #test if rssFile directory is writeable
 	if [ ! -w "$rssDir" ]; then
 	       	echo -e "RSS generation failed:\nDirectory not writeable ($rssDir)"
 	       	return 5
 	fi
 
 #test if rssFile is writeable
 	if [ -e "$rssDir/$OLDrssFile" ] && [ ! -w "$rssDir/$OLDrssFile" ]; then
 		echo -e "RSS generation failed:\nFile exists but is not writeable: $rssDir/$OLDrssFile"
 		return 6
 	fi
 
 #Setup the rss file
 	echo -e '<?xml version="1.0" encoding="ISO-8859-1" ?>' > $rssDir/$TEMPrssFile
 	echo -e '<rss version="2.0">' >> $rssDir/$TEMPrssFile
 	echo -e '<channel>' >> $rssDir/$TEMPrssFile
 	echo -e '\t<title>mythticalLibrarian</title>' >> $rssDir/$TEMPrssFile
 	echo -e '\t<link>http://xbmc.org</link>' >> $rssDir/$TEMPrssFile
 	echo -e '\t<description>mythicalLibrary Daily Report Information</description>' >> $rssDir/$TEMPrssFile
 
#write current recording information to first item.
 	echo -e "\t\t<item>">>$rssDir/$TEMPrssFile
 	echo -e "\t\t\t<title>$NewShowName</title>">>$rssDir/$TEMPrssFile
  	
	if [ "$mythicalLibrarianProgramIDCheck" = "EP" ]; then
 		echo -e "\t\t\t<link>http://www.thetvdb.com/?tab=series&amp;id=$seriesid</link>">>$rssDir/$TEMPrssFile 
	elif [ "$mythicalLibrarianProgramIDCheck" = "MV" ]; then
 		echo -e "\t\t\t<link>http://www.thetvdb.com/?tab=series&amp;id=$showname</link>">>$rssDir/$TEMPrssFile 
 	else
 		tvdotcomshowname=`echo $ShowName|replace " " "%20"`
 		echo -e "\t\t\t<link>http://www.tv.com/search.php?type=11&amp;stype=all&amp;tag=search%3Bfrontdoor&amp;qs=$tvdotcomshowname	</link>">>$rssDir/$TEMPrssFile 
	fi
 #TODO: use episode link as GUID - IMPORTANT-may be handled by using 
    	which ifconfig >/dev/null && myip=`ifconfig  | grep 'inet addr' -m1 | cut -d: -f2 | awk '{ print $1}'`
 	rssepn=`echo $epn| replace "&" "&amp;"`
 	rssNewShowName=`echo $NewShowName| replace "&" "&amp;"`
	rssplot=`echo $plot| replace "&" "&amp;"`	
 	mythicalGUID=`echo "$MyUserName@$myip""$MoveDir/$ShowFileName.$originalext"|replace "(" "%28"|replace ")" "%29"|replace " " "%20"`
 	echo -e "\t\t\t<guid>sftp://$mythicalGUID</guid>">>$rssDir/$TEMPrssFile
 	echo -e "\t\t\t<pubDate>"$(date -R -d "$ShowStartTime")"</pubDate>">>$rssDir/$TEMPrssFile
 	echo -e "\t\t\t<description>">>$rssDir/$TEMPrssFile
 	echo -e "\t\t\t\tEpisode Title: $rssepn$lineBreak">>$rssDir/$TEMPrssFile
 	echo -e "\t\t\t\tProgram: $rssNewShowName$lineBreak">>$rssDir/$TEMPrssFile
 	echo -e "\t\t\t\tSeason: $sxx$lineBreak">>$rssDir/$TEMPrssFile
 	echo -e "\t\t\t\tEpisode #: $exx$lineBreak$lineBreak">>$rssDir/$TEMPrssFile
 	echo -e "\t\t\t\t$plot">>$rssDir/$TEMPrssFile
 	echo -e "\t\t\t</description>">>$rssDir/$TEMPrssFile
 	echo -e "\t\t</item>">>$rssDir/$TEMPrssFile
 
 #If there is an old RSS file
 	if [ -e "$rssDir/$OLDrssFile" ]; then
 
 #test for number of </item> tags using grep
 		RssItemCount=$(grep -c "</item>" "$rssDir/$OLDrssFile")
 
 #if $maxItems is greater than this number
 		if [ $maxItems -gt $RssItemCount ]; then
 #set a variable to track this number + 1 for the new entry
 			itemLimit=$(($RssItemCount+1))
 		else
 #set tracking variable to $maxItems
 			itemLimit=$maxItems
 		fi
 
 #get the line number for the first <item> tag
 		firstLine=$(grep -n -m 1 "<item>" "$rssDir/$OLDrssFile" | cut -d ":" -f 1)
 #get the line number for our last </item> tag
 		lastLine=$(grep -n -m $(($itemLimit-1)) "</item>" "$rssDir/$OLDrssFile" | tail -n1 | cut -d ":" -f 1)
 #set IFS to use line break as a delineator
 		OLDIFS=$IFS
 		IFS='
'
 #Read in the old RSS file
 		declare -a old_rss_data=( $(cat "$rssDir/$OLDrssFile") )
 		arrayLen=${#old_rss_data[@]}
 #iterate through the array
 		for index in $(seq $((firstLine-1)) $((lastLine-1)))
 		do
 			echo "${old_rss_data[$index]}" >> $rssDir/$TEMPrssFile
 		done
 			#copy line from old to new
 			#if copied line is </item>
 				#increment counter
 			#if counter is great than tracking variable
 				#break
 	fi
 
 #close the file.
 	echo -e '\t</channel>' >> $rssDir/$TEMPrssFile
 	echo -e '</rss>' >> $rssDir/$TEMPrssFile
 
 #move fully formed temp file on top of the old file
 	mv "$rssDir/$TEMPrssFile" "$rssDir/$OLDrssFile"
 	echo "RSS ENTRY SUCCESSFULLY CREATED: $rssDir/$OLDrssFile"
 	IFS=$OLDIFS
 	return 0
 }

 #####MOVE MODE LOGGING#####
 #This function provides logging for move mode
 performLoggingForMoveMode () {
 #Create undo file if not present
  	test ! -f "$mythicalLibrarian/undo.sh" && echo rm "\"$mythicalLibrarian/undo.sh\"">"$mythicalLibrarian/undo.sh"
 	test ! -f "$mythicalLibrarian/doover.sh" && echo rm "\"$mythicalLibrarian/doover.sh\"">"$mythicalLibrarian/doover.sh"

 	echo  "test -L \"$InputPath\" && rm \"$InputPath\"">>"$mythicalLibrarian/undo.sh"	
	echo  "test -f \"$MoveDir/$ShowFileName.$originalext\" && mv \"$MoveDir/$ShowFileName.$originalext\" \"$InputPath\"">>"$mythicalLibrarian/undo.sh"

 	if [ "$SYMLINK" = "MOVE" ]; then

 		test "$mythicalEpiShow" = "1" && echo "test -f \"$MoveDir/$ShowFileName.$originalext\" && test -L \"$InputPath\" && rm \"$InputPath\"">>"$mythicalLibrarian/doover.sh"
		test "$mythicalEpiShow" = "1" && echo "test -f \"$MoveDir/$ShowFileName.$originalext\" && mv \"$MoveDir/$ShowFileName.$originalext\" '$InputPath'">>"$mythicalLibrarian/doover.sh"
 		test "$mythicalEpiShow" = "1" && echo "mythicalLibrarian \"$InputPath\" \"$InputTitle\" \"$InputSubtitle\"" >>"$mythicalLibrarian/doover.sh"
 	fi
}

 #####LINK MODE LOGGING#####
 #This function performs logging for link mode
 performLoggingForLinkMode () {
 	test ! -f "$mythicalLibrarian/undo.sh" && echo "rm \"$mythicalLibrarian/undo.sh\"" >> "$mythicalLibrarian/undo.sh"
 	test ! -f "$mythicalLibrarian/doover.sh" && echo rm "\"$mythicalLibrarian/doover.sh\"">"$mythicalLibrarian/doover.sh"
 	test "$mythicalEpiShow" = "1" && echo "test -L \"$MoveDir/$ShowFileName.$originalext\" && rm \"$MoveDir/$ShowFileName.$originalext\"">>"$mythicalLibrarian/doover.sh"
 	test "$mythicalEpiShow" = "1" && echo "mythicalLibrarian \"$InputPath\" \"$InputTitle\" \"$InputSubtitle\"">>"$mythicalLibrarian/doover.sh"
 	echo "test -L \"$MoveDir/$ShowFileName.$originalext\" && rm \"$MoveDir/$ShowFileName.$originalext\"">>"$mythicalLibrarian/undo.sh"
 }

 #####INITIAL DATASE GRAB#####
 ##This function grabs title and subtitle from the database for use in the rest of the script
 GrabTitleAndSubtitle () {
 	if [ "$InputTitle" = "" ]; then
 
 		InputTitle=`mysql -u$MySQLuser -p$MySQLpass -e "use '$MySQLMythDb' ; select title from recorded where basename like '$InputFileBasename'; "|replace "airdate" ""|sed -n "2p"`

     #get year for movies 
 		InputSubtitle=`mysql -u$MySQLuser -p$MySQLpass -e "use '$MySQLMythDb' ; select subtitle from recorded where basename like '$InputFileBasename' ; "|replace "Subtitle" ""|sed -n "2p"`


 	fi
 	return 0 
 }
 
 
 #####MYTHTV DATABASE#####
 #This function gathers information from the mythtv database for use in the program
 GetMythTVDatabase () {

 #Obtain MythTV Database Information
 	echo "Accessing MythTV DataBase:"

 #get chanid for recordings to identify program table
 	ChanID=`mysql -u$MySQLuser -p$MySQLpass -e "use '$MySQLMythDb' ; select chanid from recorded where basename like '$FileBaseName';"|sed -n 2p|replace "chanid" ""|replace " " ""`
  
 #get ProgramID from recorded to identify program
 	ProgramID=`mysql -u$MySQLuser -p$MySQLpass -e "use '$MySQLMythDb' ; select programid from recorded where basename like '$FileBaseName' ; " |sed -n "2p"|replace "starttime" ""`
 
 #Get zap2it series id from basename to identify program
 	Zap2itSeriesID=`mysql -u$MySQLuser -p$MySQLpass -e "use '$MySQLMythDb' ; select seriesid from recorded where basename like '$FileBaseName' ; " |sed -n "2p"|replace "seriesid" ""`
 
 #Get plot from basename to identify program
  	plot=`mysql -u$MySQLuser -p$MySQLpass -e "use '$MySQLMythDb' ; select description from recorded where basename like '$FileBaseName' ; " |sed -n "2p"|replace "description" ""`
 
 #Get rating from basename to identify program
 	stars=`mysql -u$MySQLuser -p$MySQLpass -e "use '$MySQLMythDb' ; select stars from recorded where basename like '$FileBaseName' ; " |sed -n "2p"|replace "stars" ""`

 #get show start time to identify program ----future development
 	ShowStartTime=`mysql -u$MySQLuser -p$MySQLpass -e "use '$MySQLMythDb' ; select starttime from recorded where basename like '$FileBaseName' ; " |sed -n "2p"|replace "starttime" ""`
 
 #get category from recorded to identify program table -----future development
 	ShowCategory=`mysql -u$MySQLuser -p$MySQLpass -e "use '$MySQLMythDb' ; select category from recorded where basename like '$FileBaseName' ; " |sed -n "2p"|replace "category" ""`
 
 #get original air date for tv shows
 	OriginalAirDate=`mysql -u$MySQLuser -p$MySQLpass -e "use '$MySQLMythDb' ; select originalairdate from recorded where basename like '$FileBaseName' ; "|sed -n "2p"|replace "originalairdate" ""`
 	test "$OriginalAirDate" = "0000-00-00" && OriginalAirDate="$null"
 
 #get DataType
   	XMLTVGrabber=`mysql -u$MySQLuser -p$MySQLpass -e "use '$MySQLMythDb' ; select xmltvgrabber from videosource ; "|replace "xmltvgrabber" ""|sed -n "2p"|replace " " ""`
 
 #get year for movies 
 	MovieAirDate=`mysql -u$MySQLuser -p$MySQLpass -e "use '$MySQLMythDb' ; select airdate from recordedprogram where programid like '$ProgramID' and chanid like '$ChanID' ; "|replace "airdate" ""|sed -n "2p"|replace " " ""`
 
 #Blank year if it is invalid
 	if [ ! -z "$MovieAirDate" ] && [ $MovieAirDate -lt 1900 ]; then
 		MovieAirDate=$null
 	fi
 
 
 #####COMSKIP DATA#####
 #Set up counter, remove old markup data and generate new markup file from markupstart and stop
 	if [ "$CommercialMarkup" = "Enabled" ]; then	
 #Remove old and generate a comskip Start list
 		echo "">$mythicalLibrarian/markupstart.txt
	 	mysql -u$MySQLuser -p$MySQLpass -e "use '$MySQLMythDb' ; select mark from recordedmarkup where starttime like '$ShowStartTime' and chanid like '$ChanID' and type like "4" ; " |replace "mark" ""|replace " " "">>$mythicalLibrarian/markupstart.txt
 
 #Remove old and generate comskip Stop list
 		echo "">$mythicalLibrarian/markupstop.txt
 		mysql -u$MySQLuser -p$MySQLpass -e "use '$MySQLMythDb' ; select mark from recordedmarkup where starttime like '$ShowStartTime' and chanid like '$ChanID' and type like "5" ; " |replace "mark" ""|replace " " "">>$mythicalLibrarian/markupstop.txt

 		GenComSkip
 	fi
 	return 0
 }
 

 
 #####PROCESS DATABASE INFORMATION#####
 #Function ProcessSchedulesDirect processes Zap2it/SchedulesDirect/Tribune data for use in the program
 ProcessSchedulesDirect () {
 
 #Check for database permissions
 	test "$ChanID" = "" && echo "%%%NO DATABASE INFORMATION. CHECK LOGIN/PASS OR FILE %%%%%">>$mythicalLibrarian/output.log

 #Check if database contains enough information to put into doover que
  	test "$OriginalAirDate" != "" || test "$epn" != "" && GoForDoover=1 || GoForDoover=0

 #Get rating from Stars
  	rating=`printf "%0.f\n" $stars`
  	test $rating != "" && let rating=$rating*2
 	test $rating = "" && rating=1
 
 #Create MV/EP/SH Identification Type from ProgramID
	mythicalLibrarianProgramIDCheck=${ProgramID:0:2}
 
 #Extrapolate data from Programid
	test "$mythicalLibrarianProgramIDCheck" = "SH" && ProgramIDType="Generic Episode With No Data"
	test "$mythicalLibrarianProgramIDCheck" = "MV" && ProgramIDType="Movie"
	test "$mythicalLibrarianProgramIDCheck" = "EP" && ProgramIDType="Series With Episode Data"
 	test "$mythicalLibrarianProgramIDCheck" = "SP" && ProgramIDType="Sports Programming" && mythicalLibrarianProgramIDCheck=SH
 
 	Zap2itSeriesID=`echo $ProgramID| tr -d MVSHEP | sed 's/0*//' | sed 's/.\{4\}$//' `
 	
 	datehour=`echo "$ShowStartTime"|tr ":" "."|tr " " "@"`
 	seasonyear=`echo "${ShowStartTime:0:4}"`

	test "$ShowCategory" = "Sports event" || test "$ShowCategory" = "News" || test "$ShowCategory" = "Newsmagazine" && NamingConvention=$ShowCategory

  
 	return 0 
 }

 #####REMOVE ENTRIES FROM LIBRARY#####
 #remove mythtv recording's pictures and database entries.  Thanks to barney_1.
 SYMLINKDisabled () {
 
 #Make sure we got input arguments and file is valid
 	if [ ! -f "$InputPath" ]; then
 	
 #Remove recording entry from mysql database
 		echo "REMOVING - $FileBaseName - THUMBNAILS - DATABASE ENTRIES">>"$mythicalLibrarian"/output.log
  		echo "REMOVING - $FileBaseName - THUMBNAILS - DATABASE ENTRIES"
		mysql -u$MySQLuser -p$MySQLpass -e "use '$MySQLMythDb' ; delete from recorded where basename like '$FileBaseName'; "
 
 #Remove thumbnails
 		rm -f "$originaldirname/$FileBaseName".*	
 	fi 
 	return 0
 }
 


 #####DOWNLOAD AND PARSE INFORMATION FROM THETVDB#####
 #DownlaodAndParse will download a TVDB SeriesID and parse it into a textual database if the current database is out of date.
 DownloadAndParse () {
 #Get the seriesid based on the showname
 	 seriesid=`sed -n $serieslinenumber'p' "$mythicalLibrarian"/sid.txt|grep -m1 ^`
 	 NewShowName=`sed -n $serieslinenumber'p' "$mythicalLibrarian"/shn.txt|grep -m1 ^|replace "&amp;" "&"`
 #Create folder for database if it does not exist
 if [ ! -d "$mythicalLibrarian/$NewShowName" ]; then
 	mkdir $mythicalLibrarian/"$NewShowName"
 	echo "Creating MythicalLibrarian Database Folder">>"$mythicalLibrarian"/output.log
 fi
 echo "SEARCH FOUND:""$NewShowName" "ID#:" $seriesid >>"$mythicalLibrarian"/output.log
 
 #If series ID is obtained, then get show information.
 if [ "$seriesid" != "" ] ; then
 
 #####GET SERIES INFORMATION#####

 #Get current server time
 	curl -s -m"$Timeout" "http://www.thetvdb.com/api/Updates.php?type=none">"$mythicalLibrarian/$NewShowName/current.time"
 
 #Parse file into usable data only
 	test -f "$mythicalLibrarian/$NewShowName/current.time" && cat "$mythicalLibrarian/$NewShowName/current.time"|grep "<Time>"|replace "<Time>" ""|replace "</Time>" "">"$mythicalLibrarian/$NewShowName/current.time"
  	test -f "$mythicalLibrarian/$NewShowName/current.time" && TvDbTime=`cat "$mythicalLibrarian/$NewShowName/current.time"` 
 	test -f "$mythicalLibrarian/$NewShowName/lastupdated.time" && LastUpdated=`cat "$mythicalLibrarian/$NewShowName/lastupdated.time"`
 
 #If file exist for last updated time, then get value 
 	if [ -f "$mythicalLibrarian/$NewShowName/lastupdated.time" ]; then
 		LastUpdated=`cat "$mythicalLibrarian/$NewShowName/lastupdated.time"`
 
 #If no last updated time, then assign a never updated value
  	elif [ ! -f "$mythicalLibrarian/$NewShowName/lastupdated.time" ]; then
 		LastUpdated=0
 	fi	 
 
 #Check for valid time, if blank, then assign 0 value
 	test "$LastUpdated" = "" && LastUpdated="0"
 
 #Apply Database Update interval to last update time  LastUpdated = NextUpdated
 	let LastUpdated=$LastUpdated+$UpdateDatabase
 
 
 #if episode information is out of date or not created
 	if [ "$TvDbTime" -gt "$LastUpdated" ]; then
 
 		DatabaseWasUpdate="YES"

 #####GET EPISODE INFORMATION#####
 #Strip XML tags
 		seriesid=`echo $seriesid|replace  "<seriesid>" "" |replace "</seriesid>" ""`
 
 #Download information from server
 		curl -s -m"$Timeout" "http://www.thetvdb.com/api/$APIkey/series/$seriesid/all/$Language.xml">$mythicalLibrarian"/$NewShowName/$NewShowName.xml"
 
 #create a folder/file "database" Strip XML tags.  Series, Exx and Sxx are separated into different files
 		if [ -f "$mythicalLibrarian/$NewShowName/$NewShowName.xml" ]; then 
 #Get Zap2it ID
			cat "$mythicalLibrarian/$NewShowName/$NewShowName.xml" | grep "<zap2it_id>"|replace "  <zap2it_id>" ""|replace "</zap2it_id>" ""| tr -d MVSHEP | sed 's/0*//'>"$mythicalLibrarian/$NewShowName/$NewShowName.zap2it.txt"

 #Get Fuzzy logic show name
 			cat "$mythicalLibrarian/$NewShowName/$NewShowName.xml" | grep "<EpisodeName>"|replace "  <EpisodeName>" ""|replace "</EpisodeName>" ""|sed 's/;.*//'| replace '&quot;' '"' | replace '&amp;' '&' | replace '&ndash;' '-' | replace "&lt;" "<" | replace "&gt;" ">" >"$mythicalLibrarian"/"$NewShowName"/"$NewShowName".Ename.txt

 #Get actual show name
 			cat "$mythicalLibrarian/$NewShowName/$NewShowName.xml" | grep "<EpisodeName>"|replace "&amp;" "and"|replace "  <EpisodeName>" ""|replace "</EpisodeName>" ""| replace '&quot;' '"' | replace '&amp;' '&' | replace '&ndash;' '-' | replace "&lt;" "<" | replace "&gt;" ">" |tr -d '|\?*<":>+[]/'>"$mythicalLibrarian"/"$NewShowName"/"$NewShowName".actualEname.txt

 #Get OriginalAirDate
 			cat "$mythicalLibrarian/$NewShowName/$NewShowName.xml" | grep "<FirstAired>"|replace "  <FirstAired>" ""|replace "</FirstAired>" ""|replace "/" "">"$mythicalLibrarian/$NewShowName/$NewShowName".FAired.txt

 #Get Season number
 			cat "$mythicalLibrarian/$NewShowName/$NewShowName".xml | grep "<SeasonNumber>"|replace "<SeasonNumber>" ""|replace "</SeasonNumber>" ""|replace " " "">"$mythicalLibrarian"/"$NewShowName"/"$NewShowName".S.txt
 
 #Get Episode number
 			cat "$mythicalLibrarian/$NewShowName/$NewShowName".xml | grep "<EpisodeNumber>"|replace "<EpisodeNumber>" ""|replace "</EpisodeNumber>" ""|replace " " "">"$mythicalLibrarian/$NewShowName/$NewShowName".E.txt
 
 
 		elif [ ! -f "$mythicalLibrarian/$NewShowName/$NewShowName.xml" ]; then
 			echo "COULD NOT DOWNLOAD:www.thetvdb.com/api/$APIkey/series/$seriesid/all/$Language.xml">>"$mythicalLibrarian"/output.log
 		fi
 	 
 #check if files were created and generate message
 		if [ -f $mythicalLibrarian/"$NewShowName"/"$NewShowName".Ename.txt ]; then
 	 		echo $TvDbTime>"$mythicalLibrarian/$NewShowName/lastupdated.time"
 			echo "LOCAL DATABASE UPDATED:$mythicalLibrarian/$NewShowName">>"$mythicalLibrarian"/output.log
 		elif [ ! -f "$mythicalLibrarian/$NewShowName/$NewShowName.Ename.txt" ]; then
 			echo "*** PERMISSION ERROR $mythicalLibrarian/$NewShowName/">>"$mythicalLibrarian"/output.log
 		fi
 #Send report to the log if database was not updated.
 	elif [ "$TvDbTime" -le "$LastUpdated" ]; then
 		echo "DATABASE IS MAINTAINED. TIME IS:$TvDbTime NEXT UPDATE IS:$LastUpdated"
 		DatabaseWasUpdate="NO"
 	fi
 fi
 	return 0
 }
 

 #####GENERATE tvshow.nfo#####
 #Generates folder tvshow.nfo file
 GenerateTVShowNFO () {
 	test -f "$MoveDir/tvshow.nfo" && rm "$MoveDir/tvshow.nfo"
 	echo -e "<tvshow>">>"$MoveDir"/tvshow.nfo
 	echo -e "\t<title>$NewShowName</title>">>"$MoveDir/tvshow.nfo"
 	test "$seriesid" != "" && echo -e "\t<episodeguide>http://www.thetvdb.com/api/$APIkey/series/$seriesid/all/$Language.xml</episodeguide>">>"$MoveDir/tvshow.nfo" ||  echo -e "\t<episodeguide></episodeguide>">>"$MoveDir/$ShowFileName.nfo"
 	echo -e "</tvshow>">>"$MoveDir/tvshow.nfo"
 	return 0 
 } 


 #####GENERATE NFO FILE#####
 #Create an NFO file based upon extracted information
 GenerateEpisodeNFO () {
 	test -f "$MoveDir/$ShowFileName.nfo" && rm "$MoveDir/$ShowFileName.nfo"
 	echo -e "<tvshow>">>"$MoveDir/$ShowFileName.nfo"
 	test "$NamingConvention" = "" && echo -e "\t<title>$epn Recorded $datehour -Showing</title>">>"$MoveDir/$ShowFileName.nfo" ||echo -e "\t<title>$EPN Recorded $datehour -Episode</title>">>"$MoveDir/$ShowFileName.nfo" 
 	echo -e "\t\t<rating>$rating</rating>">>"$MoveDir/$ShowFileName.nfo"
 	echo -e "\t<plot>$plot</plot>">>"$MoveDir/$ShowFileName.nfo"
 	echo -e "\t<genre>$ShowCategory</genre>">>"$MoveDir/$ShowFileName.nfo" 
	test "$HasSxxExx" = "1" && echo -e "\t<season>$sxx</season>" >>"$MoveDir/$ShowFileName.nfo" || echo -e "\t<season>0</season>">>"$MoveDir/$ShowFileName.nfo" 
 	test "$HasSxxExx" = "1" && echo -e "\t<episode>$exx</episode>">>"$MoveDir/$ShowFileName.nfo" || echo -e "\t<episode>0</episode>">>"$MoveDir/$ShowFileName.nfo" 
 	echo -e "</tvshow>">>"$MoveDir/$ShowFileName.nfo"
 	echo "'$MoveDir/$ShowFileName.nfo'" "'$MoveDir/$ShowFileName.$originalext'">>"$mythicalLibrarian"/created.tracking
 return 0
 }


 #####SHOW TRANSLATIONS HANDLING#####
 #Get show translations if the /mythicalLibrarian/showtranslation file exists.  the show title will be replaced by the one in the user created showtranslations file
 ShowTranslations () {
 	if [ -f $mythicalLibrarian/showtranslations ]; then 
 		showtranslation=`grep "$ShowName = " "$mythicalLibrarian/showtranslations"|replace "$ShowName = " ""|replace "$mythicalLibrarian/showtranslations" ""`		 
 		if [ "$showtranslation" != "" ];then 
 			ShowName=$showtranslation
 			echo "USER TRANSLATION: $InputTitle = $ShowName">>"$mythicalLibrarian"/output.log
 		elif [ "$showtranslation" = "" ];then
 			showtranslation="Inactive"
 		fi
 	fi
 	return 0
 }

 MaintenanceWarning () {
 	echo " --You have entered Maintenance mode."
 	echo " mythicalLibrarian will conduct standard maintenance while"
 	echo " perfoming maintenance on it's records.  Please ensure that"
 	echo " All network attached storage and removable storage drives"
 	echo " are connected and mounted properly before continuing"
 	read -n1 -p " Would you like mythicalLibrarian to conduct a scan? (y)/n>" yesorno
 	if [ "$yesorno" != "y" ]; then
 		echo "" 
 		echo "You must press 'y' to continue" 
		exit 1
 	fi
 }



 #####MAINTENANCE ROUTINE#####
 #DoMaintenance loops through all logged files and checks if their parent is there.  If no parent, then file is deleted.

 DoMaintenance() {
 if [ "$CommercialMarkupCleanup" = "Enabled" -a -f "$mythicalLibrarian/created.tracking" ]; then
 	mythicalLibrarianCounter=0
 	echo "PERFORMING MAINTENANCE ROUTINE">>"$mythicalLibrarian"/output.log
 	while read line
 	do
 		(( ++$mythicalLibrarianCounter ))
 		SupportFile=`echo $line|cut -d"'" -f2`
 	 	MainFile=`echo $line|cut -d"'" -f4`
 		ls "$MainFile" > /dev/null 2>&1
 		if [ "$?" != "0" ]; then
  			if [ -d "`dirname "$SupportFile"`" ]; then
 				echo "REMOVING ORPHAN $SupportFile"
 				echo "REMOVING ORPHAN $SupportFile">>"$mythicalLibrarian"/output.log
 				rm -f "$SupportFile"
 			else
 				echo "FOLDER DISCONNECTED:$SupportFile"
 				echo "FOLDER DISCONNECTED:$SupportFile">>"$mythicalLibrarian"/output.log
 				test "$removedead" != "1" && echo "$line" >> "$mythicalLibrarian/created.tracking2" || echo "REMOVING FROM FUTURE SEARCHES: $line " 
			fi
 		else 
 			echo "$line" >> "$mythicalLibrarian/created.tracking2"
  		fi
 	done <"$mythicalLibrarian/created.tracking"
  	test -f "$mythicalLibrarian/created.tracking" && rm -f "$mythicalLibrarian/created.tracking"
  	test -f "$mythicalLibrarian/created.tracking2" && mv "$mythicalLibrarian/created.tracking2" "$mythicalLibrarian/created.tracking"

 fi

 #Check if folders are empty and remove dir if needed and it was created by mythicalLibrarian
 if [ "$DirTracking" = "Enabled" -a -f "$mythicalLibrarian/dir.tracking" ]; then
 	while read line
 	do
 		DirToCheck=$line
 		if [ -d "$DirToCheck" ]; then
  			DirToCheckCheck=`ls "$line"|replace "tvshow.nfo" ""|grep -m1 ^`
 			test "$DirToCheckCheck" = "" && DirToCheckCheck=`ls "$line"|replace "tvshow.nfo" ""|grep -m2 ^`
		 	if [ "$DirToCheckCheck" = "" ]; then
 				echo "REMOVING ORPHAN FOLDER:$line">>"$mythicalLibrarian"/output.log
  				echo "REMOVING ORPHAN FOLDER:$line"
 				test -f "$line/tvshow.nfo" && rm -f "$line/tvshow.nfo"
				rmdir "$line"
			elif [ "$DirToCheckCheck" != "" ]; then
  				echo "$DirToCheck" >> "$mythicalLibrarian/dir.tracking2"
			fi
 		elif [ ! -d "$DirToCheck" ]; then
 			echo $DirToCheck >> "$mythicalLibrarian/dir.tracking2"
 		fi

 	done < "$mythicalLibrarian"/dir.tracking
  	rm -f "$mythicalLibrarian/dir.tracking"
  	test -f "$mythicalLibrarian/dir.tracking2" && mv "$mythicalLibrarian/dir.tracking2" "$mythicalLibrarian/dir.tracking"
 fi 	 
}



 
 #####SCAN MODE#####
 #This function will scan a folder and process the entire library
 mythicalScan () {
 	checkext=$InputTitle
	if [ "$checkext" = "" ]; then
	 	echo "Cannot process blank file extensions"
		echo 'usage: mythicalLibrarian --scan "ext" "/path/to/folder" "ext"'
		echo 'usage: mythicalLibrarian --scan "mpg" "/home/mythtv/videos" "mpg"'
		exit 1
	elif [ "${checkext:0:2}" = "./" ]; then
 		echo "please specify the full path to the file"
 		echo 'usage: mythicalLibrarian --scan "ext" "/path/to/folder" "ext"'
		echo 'usage: mythicalLibrarian --scan "mpg" "/home/mythtv/videos" "mpg"'
 		exit 1
	fi
 	scanpath=$InputSubtitle
 	if [ "$scanpath" = "" ]; then
		echo "please supply a path"
 		echo 'usage: mythicalLibrarian --scan "ext" "/path/to/folder" "ext"'
		echo 'usage: mythicalLibrarian --scan "mpg" "/home/mythtv/videos" "mpg"'
 		exit 1 
	fi
 	echo "--You have entered scan Mode."
	echo " mythicalLibrarian will conduct a scan of the folder:"
 	echo " $scanpath"
 	echo " searching for file types:$checkext. Each file will be"
	echo " processed through mythicalLibrarian. This mode will" 
	echo " only work when database access functional."
 	echo " please scan a single file to test capabilities before"
	echo " running the scan mode of operation using the following"
	echo " eg. mythicalLibrarian /path/to/file.ext"
 	echo " mythicalLibrarian will first run the doovers to prevent"
 	echo " clobbering and creation of unnescessary links."
	echo " This operation can be reversed using the following command:"
 	echo " sudo mythicalLibrarian --undo"
 	echo " Data loss can occour if this operation is interupted."
	read -n1 -p " Would you like mythicalLibrarian to conduct a scan? (y)/n>" yesorno
 	echo ""
 	test "$yesorno" = "" && yesorno="y"
 	if [ "$yesorno" = "y" ]; then
 		mythicalLibrarian --doover
	 	ls -1 $scanpath/*.$checkext>$mythicalLibrarian/scan.temp
 		echo $scanpath $checkext
  		while read line
 		do
			test ! -L "$line" && test ! -S "$line" && test ! -d "$line" && mythicalLibrarian "$line"	
 		done<"$mythicalLibrarian/scan.temp"
 		rm "$mythicalLibrarian/scan.temp"
 		exit 0
 	else
 	 	echo "you must press 'y' to scan"
 		exit 0
 	fi
 	exit 1
}

 #####MYTHICAL DIAGNOSTICS#####
 #This function provides a functions check on mythicalLibrarian
 mythicalDiagnostics () {

 	echo "--You have entered diagnostic mode"
 	echo "mythicalLibrarian will now conduct a series of tests."
	read -n1 -p "press any key to verify installed packages..."
 	echo ""
 	test `which replace`>/dev/null && echo "package 'mysql-server-5.0' is installed" || checkb="mysql-server-5.0 "
	test `which curl`>/dev/null && echo "package 'curl' is installed" || checkc="curl "
	test `which agrep`>/dev/null && echo "package 'agrep' or 'tre-agrep' is installed" || checkd="agrep "
	test `which notify-send`>/dev/null && echo "package 'libnotify-bin' is installed" || checke="libnotify-bin "	
	if [ `which notify-send`>/dev/null ] && [ `which agrep`>/dev/null ] && [ `which curl`>/dev/null ] && [ `which replace`>/dev/null ]; then
 		packagecheck="***PASSED***"
		echo "Installed packages check ***PASSED***"
	else
 		packagecheck="***FAILED***"
		echo "Installed packages check ***FAILED***" 
 		echo "Please run 'apt-get install $checkb$checkc$checkd$checke' or equivalant"
	fi
 	read -n1 -p "Press any key to perform Desktop Message test..."
 	echo ""
 	echo "Performing librarian-notify-send test"
 	echo "This test verifies that the message was sent to the DBUS."
	echo "This test does not verify the user has a valid desktop open."
 	sudo -u "$NotifyUserName" /usr/local/bin/librarian-notify-send "mythicalLibrarian test" "Testing Desktop Communications" "info"
 	test "$?" = "0" && notifytest="***PASSED***" || notifytest="***FAILED***"
 	echo "Desktop Notifications test $notifytest"
 	read -n1 -p "Press any key to perform XBMC Notification test..."
 	echo ""
	echo "Performing XBMC Notifications test"
  	for XBMCIP in ${XBMCIPs[@]}
 	do
 		echo "SENDING REQUESTED COMMANDS TO:$XBMCIP"
		XBMCcomm=`curl -s "http://"$XBMCIP"/xbmcCmds/xbmcHttp?command=ExecBuiltIn(Notification(mythical%20Librarian%20Test%2CTesting%20Communication%20with%20mythicallibrarian))"|tr -d "</html>i^" `
 	done
 	test "`echo $XBMCcomm`" = "OK" && XBMCcomm="***PASSED***" || XBMCcomm="***FAILED***"
 	echo "XBMC Communications $XBMCcomm"
 	read -n1 -p "Press any key to test file system permissions..."
 	echo ""
 	echo "Testing file system permissions"
 	MoveFileSize="10000"
 	MoveFileSize=$((MoveFileSize/1024))
 	MoveDirFreeSpace=`df -P "$MoveDir"|sed -n 2p|awk '{print $4}'`  
 	AlternateMoveDirFreeSpace=`df -P "$AlternateMoveDir"|sed -n 2p|awk '{print $4}'`
 	test "$Database" = "Enabled" && test -d $PrimaryMovieDir && PrimaryMovieDirFreeSpace=`df -P "$PrimaryMovieDir"|sed -n 2p|awk '{print $4}'` || PrimaryMovieDirFreeSpace=0
 	test "$Database" = "Enabled" && test -d $AlternateMovieDir &&  AlternateMovieDirFreeSpace=`df -P "$AlternateMovieDir"|sed -n 2p|awk '{print $4}'`|| AlternateMovieDirFreeSpace=0
 	test "$Database" = "Enabled" && test -d $PrimaryShowDir &&  PrimaryShowDirFreeSpace=`df -P "$PrimaryShowDir"|sed -n 2p|awk '{print $4}'` || PrimaryShowDirFreeSpace=0
 	test "$Database" = "Enabled" && test -d $AlternateShowDir && AlternateShowDirFreeSpace=`df -P "$AlternateShowDir"|sed -n 2p|awk '{print $4}'`|| AlternateShowDirFreeSpace=0
 	WorkingDirFreeSpace=`df -P "$mythicalLibrarian"|sed -n 2p|awk '{print $4}'` 
 	checkpermissions "$MoveFileSize" "$MoveDirFreeSpace" "$MoveDir" 
 	MoveDirWritable=$TMoveDirWritable
 	checkpermissions "$MoveFileSize" "$AlternateMoveDirFreeSpace" "$AlternateMoveDir" 
 	AlternateMoveDirWritable=$TMoveDirWritable
 
	test "$Database" = "Enabled" && checkpermissions "$MoveFileSize" "$PrimaryMovieDirFreeSpace" "$PrimaryMovieDir"
 	test "$Database" = "Enabled" && PrimaryMovieDirWritable=$TMoveDirWritable
 	test "$Database" = "Enabled" && checkpermissions "$MoveFileSize" "$AlternateMovieDirFreeSpace" "$AlternateMovieDir"
 	test "$Database" = "Enabled" && AlternateMovieDirWritable=$TMoveDirWritable
	test "$Database" = "Enabled" && checkpermissions "$MoveFileSize" "$PrimaryShowDirFreeSpace" "$PrimaryShowDir"
 	test "$Database" = "Enabled" && PrimaryShowDirWritable=$TMoveDirWritable
	test "$Database" = "Enabled" && checkpermissions "$MoveFileSize" "$AlternateShowDirFreeSpace" "$AlternateShowDir"
 	test "$Database" = "Enabled" && AlternateShowDirWritable=$TMoveDirWritable 
 
	checkpermissions "5000" "$WorkingDirFreeSpace" "$mythicalLibrarian"
	WorkingDirWritable=$TMoveDirWritable

 	echo "USER SETTING     |FLAG|Folder name"
	echo "MoveDir          |$MoveDirWritable   |$MoveDir "
	echo "AlternateMoveDir |$AlternateMoveDirWritable   |$AlternateMoveDir"
	echo "PrimaryMovieDir  |$PrimaryMovieDirWritable   |$PrimaryMovieDir"
	echo "AlternateMovieDir|$AlternateMovieDirWritable   |$AlternateMovieDir"

	echo "PrimaryShowDir   |$PrimaryShowDirWritable   |$PrimaryShowDir"
 	echo "AlternateShowDir |$AlternateShowDirWritable   |$AlternateShowDir"
  	echo "mythicalLibrarian|$WorkingDirWritable   |$mythicalLibrarian"
	test "$MoveDirWritable" = "1" && test "$AlternateMoveDirWritable" = "1" && test "$WorkingDirWritable" = "1" && folderchecks="***PASSED***" || folderchecks="***FAILED***"
 	echo "Critical Filesystem checks $folderchecks"
 	test "$packagecheck" = "***PASSED***" && test "$folderchecks" = "***PASSED***" && overallchecks="***PASSED***" || overallchecks="***FAILURE***"

 	if [ "$overallchecks" = "***PASSED***" ]; then
 	 read -n1 -p "press any key to test mythicalLibrarian..."
 	 echo ""
 	 echo " Falsifying information. MythTV-Database is not used for testing."
 	 echo " Performing fuzzy logic lookup on non-MythTV-database file."
	 echo " Please wait. It may take a moment to build database files "
 	 echo " executing mythicalLibrarian testfile.ext 'mister rogers' 'show 1332'"
	 echo " testing for exit status 0"

	 mythicalLibrarian testfile.ext "mister rogers" "show 1332"
	 exitstatus=$?
	 echo "exited with status $exitstatus"
 	 if [ "$exitstatus" = "0" ]; then 
 		mythicaltest="***PASSED***" 	 
 	 else
 		echo "OVERALL FAILURE"
 		mythicaltest="COULD NOT COMPLETE"
 	 	overallchecks="***FAILURE***"
 	 fi
	else
 		echo "OVERALL FAILURE"
 		mythicaltest="COULD NOT COMPLETE" 
 	fi
	read -n1 -p "press any key to continue on to the final results..."	
 	echo ""
	echo -e "  All tests complete            RESULTS"
	echo -e "  Installed Packages:        $packagecheck $checkc$checkd$checke"
 	echo -e "  Notifications Test:        $notifytest"
	echo -e "  XBMC Communications:       $XBMCcomm"
	echo -e "  File System Checks:        $folderchecks"
 	echo -e "  mythicalTesting:           $mythicaltest"
 	echo -e "  Overall mythicalReadiness: $overallchecks"
 	echo -e "-----End of diagnostics-----"
 	test "$overallchecks" = "***FAILURE***" && exit 1
  	exit 0
 }
 
 #####DOOVER PROCESSING#####
 #This function provides an easy way to redo failed jobs.
 executeDoOver () {
 	if [ "$(id -u)" != "0" ]; then
 		echo "You do not have sufficient privlidges to run this script."
 		echo "--doover must be executed with the sudo command"
 		echo "eg. 'sudo mythicalLibrarian --doover'"
 		exit 1
 	fi
 	test "$SUDO_USER" = "" && SUDO_USER=`whoami`
 	echo "--You have entered doover mode."
	echo " In this mode of operation, mythicalLibrarian will rerun"
 	echo " mythicalLibrarain against all files which failed on the"
 	echo " last run of mythicalLibrarian.  It is important that this"
        echo " process does not get interupted or data loss may occour."
 	read -n1 -p "  Press 'y' to continue or 'n' to exit..... y/(n):>" yesorno

 	if [ "$yesorno" = "y" ] && [ -f "$mythicalLibrarian/doover.sh" ]; then
 		chmod +x "$mythicalLibrarian/doover.sh"
 		sudo -u $SUDO_USER cat "$mythicalLibrarian/doover.sh" >> "$mythicalLibrarian/doover.sh.old"
 		sudo -u $SUDO_USER "$mythicalLibrarian/doover.sh"
 		echo "done."
 		exit 0
	else
  		test -f "$mythicalLibrarian/doover.sh" && echo "You must press y to execute Doover." || echo "No Doover jobs exist."
		exit 0
	fi
 	exit 1
 }
 
 #####UNDO JOBS#####
 #This function provides an easy way to undo all mythicalLibrarian jobs
 executeUndo () {
 	if [ "$(id -u)" != "0" ]; then
 		echo "You do not have sufficient privlidges to run this script."
 		echo "--doover must be executed with the sudo command"
 		echo "eg. 'sudo mythicalLibrarian --undo'"
 		exit 1
 	fi
 	test "$SUDO_USER" = "" && SUDO_USER=`whoami`
 	echo "--You have entered undo mode."
	echo " In this mode of operation, mythicalLibrarian will reverse"
 	echo " file changes created by the current user while running."
 	echo " mythicalLibrarian. There will be no indicators while undo"
 	echo " is running. It is important that this process is not "
 	echo " interupted or data loss may occour"
 	read -n1 -p "  Press 'y' to continue or 'n' to exit..... y/(n):>" yesorno
 	echo ""
 	if [ "$yesorno" = "y" ]; then
 		test -f "$mythicalLibrarian/undo.sh" && cat "$mythicalLibrarian/undo.sh">>"$mythicalLibrarian/undo.sh.old"
 	 	test -f "$mythicalLibrarian/undo.sh" && chmod +x "$mythicalLibrarian/undo.sh"
 		test -f "$mythicalLibrarian/undo.sh" && sudo -u $SUDO_USER cat "$mythicalLibrarian/undo.sh" >> "$mythicalLibrarian/undo.sh.old"
		test -f "$mythicalLibrarian/undo.sh" && sudo -u $SUDO_USER "$mythicalLibrarian/undo.sh"
		test -f "$mythicalLibrarian/doover.sh" && cat "$mythicalLibrarian/doover.sh" >> "$mythicalLibrarian/doover.sh.old"
 		test -f "$mythicalLibrarian/doover.sh" && rm -f "$mythicalLibrarian/doover.sh"
 		test -f "$mythicalLibrarian/created.tracking" && cat "$mythicalLibrarian/created.tracking">>"$mythicalLibrarian/created.tracking.old"
 		test -f "$mythicalLibrarian/created.tracking" && rm -f "$mythicalLibrarian/created.tracking"

 		echo "done."
		exit 0
	else
	 	echo "You must press y to execute undo"
		exit 0
	fi
 	exit 1
 }

 #####HELP#####
 #This function provides a helpful message.
 mythicalHelp () {
 	echo " mythicalLibrarian --:invalid pattern"
	echo ""
 	echo "usage: mythicalLibrarian 'path/to/file' ['title'] ['subtitle']"
 	echo "usage: mythicalLibrarian --mode [parameter] [parameter]"
 	echo " items in brackets are [context sensitve]"

 	if [ "$switchhelp" = "1" ]; then
	 	echo ""
 		echo "Author: Adam Outler outleradam(at)hotmail.com"

 		echo ""
	 	echo "-m|--mythicalDiagnostics"
  		echo "  diagnostics: tests functions of mythicalLibrarian"
 		echo "  eg. mythicalLibrarian --mythicalDiagnostics"
 		echo ""
 		echo "-s|--scan filetype /path/to/folder"
  		echo "  scan: creates a library from an entire folder"
 		echo "  eg. mythicalLibrarian --scan mpg /home/mythtv/videos"
 		echo "" 		
 		echo "-doMaintenance"
  		echo "  doMaintenance: removes FOLDER DISCONNECTED errors from logs"
 		echo "  eg. mythicalLibrarian --doMaintenance"
 		echo "" 		
 	 	echo "-u|--update"
 		echo "  update: mythicalLibrarian to the current version"
 		echo "  eg. sudo mythicalLibrarian --update"
 		echo ""
 		echo "-d|--doover"
  		echo "  eg. sudo mythicalLibrarian --doover"
 		echo "  doover: reruns previously failed jobs sequentially"
 		echo ""
 		echo "-u|--undo"
 		echo "  undo: returns all files to original states"
 		echo "  eg. sudo mythicalLibrarian --undo"
 		echo ""
 		echo "-?|-h|--help"
 		echo "  example: mythicalLibrarian --help"
 		echo "  Help: displays this message"
 		echo "======================================================="
 	fi
	echo " ensure you have set the user settings properly and run"
 	echo " --mythicalDiagnostics before using mythicalLibrarian"
 	echo " in --scan mode or as a UserJob."
	exit 1
 }
 
 #mythicalUpdater will download the Stable or SVN version of mythicalSetup
 mythicalUpdater () {
 	test ! -d "$mythicalLibrarian" && mkdir "$mythicalLibrarian"
  	test ! -d "$mythicalLibrarian/mythicalSetup" && mkdir "$mythicalLibrarian/mythicalSetup"
 	cat "$mythicalLibrarian/output.log" >> "$mythicalLibrarian/output.log.old"
	sudo -u $SUDO_USER echo "<<<UPDATER ACTIVATED>>>">"$mythicalLibrarian/output.log"
 	if [ ! -f "../output.log" ]; then 
	 	echo "Please type 'cd $mythicalLibrarian/mythicalSetup' before running this command"
		exit 1
 	fi

 	if [ "$(id -u)" != "0" ]; then
		echo "You do not have sufficient privlidges to run this script."
 		echo "Try again with sudo mythicalLibrarian --update"
		exit 1
	fi
 	test "$SUDO_USER" = "" && SUDO_USER=`whoami`

 	echo "--You have entered Update mode."
	echo " mythicalSetup will now update your system to the latest revision."
 	echo " You will be asked a series of questions and the updater will make"
	echo " decisions based upon your selections and your system. mythicalSetup "
 	echo " is designed to make updating easy and will set up the following:"
 	echo " Episode naming, Movie naming, local RSS feeds, Daily Report,"
 	echo " Desktop Notifications, XBMC notificatons, XBMC library updates"
 	echo " MythTV Database settings, and various operational modes. Upon"
 	echo " completion, a diagnostic will be run.  This is designed to be" 
	echo " a fully automated process.  Please pay attention and report any"
	echo " errors which may occour during this process."
 	read -n1 -p " Do you wish to continue? y/(n) >" yesorno
 	echo ""
 	test "$yesorno" != "y" && exit 0

 	test -f ./mythicalSetup.sh && rm -f ./mythicalSetup.sh
      	curl "http://mythicallibrarian.googlecode.com/svn/trunk/mythicalSetup.sh">"./mythicalSetup.sh"
 	sudo chmod +x ./mythicalSetup.sh
 	./mythicalSetup.sh
 	exit $?
 	exit 0
 }

  		
 	
 ########## END FUNCTIONS HERE ##########
 ########## BEGIN PROGRAM HERE ##########
 
 
 
 
 
 #####DEFINE ENVIRONMENT AND VARIABLES#####
 MyUserName=`whoami`
 #make our working dir if it does not exist
 if [ ! -d "$mythicalLibrarian" ]; then 
 	mkdir $mythicalLibrarian
 	echo "creating home/mythicalLibrarian and log file">>"$mythicalLibrarian"/output.log
 fi
 
 

 InputTitle=$2
 InputSubtitle=$3
 InputPath=$1
 test "$InputPath" != "testfile.ext" && test ! -f "$InputPath" && test "$InputTitle" = "" && test "${InputPath:0:1}" != "-" && mythicalHelp
 test "$InputPath" = "" && mythicalHelp

 #####COMMAND LINE SWITCHES#####
 #check for command line switches
 case $InputPath in 
	--scan|-s)
 		mythicalScan		
 	;;
	--mythicalDiagnostics|-m)
       		mythicalDiagnostics
  	;;
	--doover|-d)
 		executeDoOver
	;;
 	--undo|-u)
 		executeUndo
	;;
 	--help|-?|-h)
 		switchhelp=1
 		mythicalHelp
 	;;
 	--update|-u)
   		mythicalUpdater
 	;;
 	--doMaintenance)
 		MaintenanceWarning
 		removedead=1
 		DoMaintenance
 		echo "done."
 		exit 0
 	;;
 esac
 test "${InputTitle:0:1}" = "-" && mythicalHelp

 #####ENVIRONMENTAL VARIABLES CONTINUED#####
 #Initial log entry 
 echo "@@@@@@@@@@@NEW SEARCH INITIATED AT `date`@@@@@@@@@@@@@@">>"$mythicalLibrarian"/output.log 
 

 InputFileBasename=`basename $InputPath`

 #If not specified, grab Title and subtitle from database using basename for reference
 GrabTitleAndSubtitle
 ShowName=$InputTitle
 test "$ShowName" = "" && mythicalHelp
 epn=`echo $InputSubtitle|sed 's/;.*//'|tr -d '|\?*<":>+[]/'`
 originalext=`echo "${InputPath#*.}"`
 originaldirname=`dirname "$InputPath"`
 FileBaseName=${InputPath##*/}  
 FileName="$InputPath"

 #Check for show translations relating to the show in question.
 ShowTranslations

 #Format Show name for Sending to www.TheTvDb.com and XBMC
 tvdbshowname=`echo $ShowName|replace " " "%20"`


 #Check and make doover.sh if it does not exist
 test ! -f "$mythicalLibrarian/doover.sh" && echo 'rm -f "'$mythicalLibrarian'"/doover.sh'>$mythicalLibrarian/doover.sh


#Setup paths if useoriginaldir is active.
 if [ "$UseOriginalDir" = "Enabled" ]; then
 	 #MoveDir is the folder which mythicalLibrarian will move the file.  No trailing / is accepted eg. "~/videos"
 	 MoveDir="$originaldirname/Episodes"
 	 test ! -d "$MoveDir" && mkdir "$MoveDir"
 	 #AlternateMoveDir will act as a seccondary MoveDir if the primary MoveDir fails.  No trailing / is accepted eg. "~/videos"
 	 AlternateMoveDir="$originaldirname/Episodes"
 	 test ! -d "$AlternateMoveDir" && mkdir "$AlternateMoveDir"
 	 #Primary Movie Dir. mythicalLibrarian will attempt to move to this dir first. No trailing / is accepted eg. "~/videos"
 	 PrimaryMovieDir="$originaldirname/Movies"
 	 test ! -d "$PrimaryMovieDir" && mkdir "$PrimaryMovieDir"
 	 #AlternateMoveDir will act as a Seccondary move dir if the primary move dir fails
 	 AlternateMovieDir="$originaldirname/Movies"
  	 test ! -d "$AlternateMovieDir" && mkdir "$AlternateMovieDir"
  	 #PrimaryShowDir is where generic episodes will be placed
 	 PrimaryShowDir="$originaldirname/Showings"
  	 test ! -d "$AlternateMovieDir" && mkdir "$AlternateMovieDir"
  	 #AlternateShowDir will act as a Seccondary Show Dir if the primary show dir fails
  	 AlternateShowDir="$originaldirname/Showings"
  	 test ! -d "$AlternateShowDir" && mkdir "$AlternateShowDir"
 fi	

 
 
 #####MAINTENANCE#####
 #Loop through the list of created comskip files from comskip.tracking and remove orphans.
 DoMaintenance
  

 #####GATHER INFORMATION FROM  DATABASE#####
  #Get information if database is enabled
 if [ "$Database" = "Enabled" ]; then 
  	test "$DatabaseType" = "MythTV" && GetMythTVDatabase
	test "$GuideDataType" = "SchedulesDirect" && ProcessSchedulesDirect
 
  fi
  #Report found data
 echo "RECSTART:$ShowStartTime MOVIEYEAR:$MovieAirDate SERIESDATE:$OriginalAirDate"
 echo "PROGRAMID:$ProgramID ShowCategory:$ShowCategory STARS:$stars RATING:$rating"
 echo "PLOT: $plot"
  
 
 #####SEARCH FOR SHOW NAME#####
 if [ "$InputSubtitle" != "" ] || [ "$mythicalLibrarianProgramIDCheck" = "EP" ] ; then
 	echo "SEARCHING: www.TheTvDb.com SHOW NAME: $ShowName EPISODE: $epn">>"$mythicalLibrarian"/output.log
 	echo "FILE NAME: $InputPath">>"$mythicalLibrarian"/output.log
 
 
 
 #download series info for show, parse into temporary text db- sid.txt shn.txt
 	curl -s -m"$Timeout" www.thetvdb.com/api/GetSeries.php?seriesname=$tvdbshowname>"$mythicalLibrarian/working.xml"
 	cat $mythicalLibrarian/working.xml | grep "<seriesid>"|replace "<seriesid>" ""|replace "</seriesid>" "" | replace '&quot;' '"' | replace '&amp;' '&' | replace '&ndash;' '-' | replace "&lt;" "<" | replace "&gt;" ">" >"$mythicalLibrarian/sid.txt"
 	cat $mythicalLibrarian/working.xml | grep "<SeriesName>"|replace "<SeriesName>" ""|replace "</SeriesName>" "" | replace '&quot;' '"' | replace '&amp;' '&' | replace '&ndash;' '-' | replace "&lt;" "<" | replace "&gt;" ">" >"$mythicalLibrarian/shn.txt"
 
 elif [ -z "$MovieAirDate" ]; then
 	NewShowName=$InputTitle
 fi


 
 ######DOWNLOAD/PARSE/IDENTIFICATION OF SHOW NAME######
 if [ "Zap2itSeriesID" != "" ] && [ "$mythicalLibrarianProgramIDCheck" = "EP" ] ; then
 	mythicalLibrarianCounter=0
 
 #loop through all show names received by TheTvDb and match Zap2it ID.
 	while read line 
 	do
 		(( ++ mythicalLibrarianCounter ))
 		serieslinenumber=$mythicalLibrarianCounter
 		echo "TESTING FOR ZAP2IT SERIES ID MATCH:$line"
 		DownloadAndParse
 		ParsedZap2itSeriesID=`cat "$mythicalLibrarian/$NewShowName/$NewShowName.zap2it.txt"`
       	if [ "$ParsedZap2itSeriesID" = "$Zap2itSeriesID" ]; then
 
 #Mark matched Zap2it ID
  			echo "MATCH FOUND BASED ON Zap2itID:$NewShowName ID:$seriesid"
 			echo "MATCH!!!! Zap2itID:$NewShowName ID.$seriesid">>"$mythicalLibrarian"/output.log
 			MatchedShowName=$NewShowName
 			MatchedSeriesID=$seriesid
 			MatchedSeriesLineNumber=$serieslinenumber
 		fi
 	done < "$mythicalLibrarian"/shn.txt
 	if [ -n "$MatchedShowName" ]; then
 
 #Use matched Zap2it ID
 		NewShowName=$MatchedShowName
 		seriesid=$MatchedSeriesID
 		serieslinenumber=$MatchedSeriesLineNumber
 	else
 
 #when no match is found:
 		echo "USING FUZZY LOGIC FOR EPISODE RECOGNITION Please update TheTvDb.com">>"$mythicalLibrarian"/output.log
 		echo "USING FUZZY LOGIC FOR EPISODE RECOGNITION Please update TheTvDb.com"

 #Use fuzzy logic to make the best match of the show name as a last resort
 	 	FuzzySeriesMatch
 		echo "FUZZY LOGIC SHOW NAME: $NewShowName ID: $seriesid"
 		DownloadAndParse
 	fi
 elif [ "Zap2itSeriesID" != "" ] && [ "$mythicalLibrarianProgramIDCheck" = "EP" ] || [ "$InputSubtitle" != "" ]; then
 
 #If no zap2it ID is present, then use fuzzy logic to do show tranlation
  	FuzzySeriesMatch
 	echo "FUZZY LOGIC SHOW NAME: $NewShowName ID: $seriesid"
 	DownloadAndParse
 fi
 
 if [ "$seriesid" != "" ] ; then 
 
 
 #####PROCESS EPISODE INFORMATION##### 	
 #If info was pulled from database, then plug name into newshowname	
 	test -z "$NewShowName" && NewShowName=$ShowName
 
 #use fuzzy logic to find the closest show name from the locally created database and return absolute episode number

 
 ##AIRDATE MATCH##
 	if [ "$ChanID" != "" ]; then
 		if [ "$OriginalAirDate" != "" ] ; then
 			absolouteEpisodeNumber=0
 			absolouteEpisodeNumber=`grep -n "$OriginalAirDate" "$mythicalLibrarian""/""$NewShowName""/""$NewShowName"".FAired.txt"|grep -m1 ^|sed 's/:.*//'`
 #Subtract 1 to compensate for original series airdate
 			let absolouteEpisodeNumber=$absolouteEpisodeNumber-1
 			echo DB ABSOLOUTE Exx NR:$absolouteEpisodeNumber BASED ON ORIG AIR DATE:$OriginalAirDate 
 		fi
 #Remove no match found, "-1" = ""
 		test "$absolouteEpisodeNumber" = "-1" && absolouteEpisodeNumber=""
 	fi

 	 
 ##FUZZY LOGIC SUBTITLE MATCH##
	if [ "$absolouteEpisodeNumber" = "" ]; then
 		 	absolouteEpisodeNumber=`agrep -Byn "${epn:0:29}" "$mythicalLibrarian/$NewShowName/$NewShowName.Ename.txt"|sed 's/:.*//'|grep -m1 ^`
 	fi


 	echo FUZZY Exx NUMBER:$absolouteEpisodeNumber 

 	echo "DEFINED ABSOLOUTE EPISODE NUMBER: $absolouteEpisodeNumber">>"$mythicalLibrarian"/output.log
  
 #if line match is obtained, then gather new episode name, Sxx and Exx
 	if [ "$absolouteEpisodeNumber" !=  ""  ]; then
 		epn=`sed -n $absolouteEpisodeNumber'p' $mythicalLibrarian/"$NewShowName"/"$NewShowName".actualEname.txt`
 
 #gather series and episode names from files created earlier.
 		exx=`sed -n $absolouteEpisodeNumber'p' $mythicalLibrarian/"$NewShowName"/"$NewShowName".E.txt`
 		sxx=`sed -n $absolouteEpisodeNumber'p' $mythicalLibrarian/"$NewShowName"/"$NewShowName".S.txt`
 
 #Single digit episode and show names are not allowed Ex and Sx replaced with Exx Sxx
 		test $exx -lt 10  && exx="E0$exx" || exx="E$exx"
 		test $sxx -lt 10  && sxx="S0$sxx" || sxx="S$sxx"
 	fi
 	echo "EPISODE:$epn ABSOLUTE NUMBER:$absolouteEpisodeNumber" $sxx$exx
 
 #if series id is not obtained send failure message
 elif [ -z "$seriesid" ]; then 
 	echo "series was not found the tvdb or this is a movie may be down try using a showtranslation for $InputTitle">>"$mythicalLibrarian"/output.log
  	if [ "$Database" = "Enabled" ]; then
 		echo "DB ENTIRES- RECSTART:$ShowStartTime- MOVIE:$MovieAirDate- ORIGAIRDATE:$OriginalAirDate- CHID:$ChanID- CAT:$ShowCategory-">>"$mythicalLibrarian"/output.log
 		exx=$null
 	fi
 fi
 
 #If it's a movie, give it a name.
 test "$mythicalLibrarianProgramIDCheck" = "MV" && NewShowName="$InputTitle"
 

 #######SANITY CHECKS#####
 #If file is a link then activate link mode so the original link is not screwed up.
 if [ -L "$InputPath" ]; then
 	 echo "FILE IS A LINK ACTIVATING SYMLINK LINK MODE">>"$mythicalLibrarian"/output.log 
 	 SYMLINK=LINK
 fi 
 
 #Get file size and free space
 MoveFileSize=`stat -c %s "$InputPath"`
 MoveFileSize=$((MoveFileSize/1024))
 MoveDirFreeSpace=`df -P "$MoveDir"|sed -n 2p|awk '{print $4}'`
 AlternateMoveDirFreeSpace=`df -P "$AlternateMoveDir"|sed -n 2p|awk '{print $4}'`

 if [ "$Database" = "Enabled" ]; then
 	PrimaryMovieDirFreeSpace=`df -P "$PrimaryMovieDir"|sed -n 2p|awk '{print $4}'` || PrimaryMovieDirFreeSpace=0
 	AlternateMovieDirFreeSpace=`df -P "$AlternateMovieDir"|sed -n 2p|awk '{print $4}'`|| AlternateMovieDirFreeSpace=0
 	PrimaryShowDirFreeSpace=`df -P "$PrimaryShowDir"|sed -n 2p|awk '{print $4}'`|| PrimaryShowDirFreeSpace=0
 	AlternateShowDirFreeSpace=`df -P "$AlternateShowDir"|sed -n 2p|awk '{print $4}'`|| AlternateShowDirFreeSpace=0
 fi
 
 OriginaldirFreeSpace=`df -P "$originaldirname"|sed -n 2p|awk '{print $4}'`
 WorkingDirFreeSpace=`df -P "$mythicalLibrarian"|sed -n 2p|awk '{print $4}'`
 
 #Call permissions check from function.  Write small file, delete, get results
 checkpermissions "$MoveFileSize" "$MoveDirFreeSpace" "$MoveDir"
 MoveDirWritable=$TMoveDirWritable
 checkpermissions "$MoveFileSize" "$AlternateMoveDirFreeSpace" "$AlternateMoveDir"
 AlternateMoveDirWritable=$TMoveDirWritable
 
 if [ "$Database" = "Enabled" ]; then
 	checkpermissions "$MoveFileSize" "$PrimaryMovieDirFreeSpace" "$PrimaryMovieDir"
 	PrimaryMovieDirWritable=$TMoveDirWritable
 	checkpermissions "$MoveFileSize" "$AlternateMovieDirFreeSpace" "$AlternateMovieDir"
 	AlternateMovieDirWritable=$TMoveDirWritable
 	checkpermissions "$MoveFileSize" "$PrimaryShowDirFreeSpace" "$PrimaryShowDir"
 	PrimaryShowDirWritable=$TMoveDirWritable
 	checkpermissions "$MoveFileSize" "$AlternateShowDirFreeSpace" "$AlternateShowDir"
 	AlternateShowDirWritable=$TMoveDirWritable
 fi
 
 checkpermissions "1" "$OriginaldirFreeSpace" "$originaldirname"
 OriginalDirWritable=$TMoveDirWritable
 checkpermissions "5000" "$WorkingDirFreeSpace" "$mythicalLibrarian"
 WorkingDirWritable=$TMoveDirWritable
 
 
 #####DEBUG MODE OUTPUT BLOCK#####
 if [ "$DEBUGMODE" = "Enabled" ]; then
 	echo "###################DEBUG MODE ENABLED####################">>"$mythicalLibrarian"/output.log
 	echo "MY USER NAME:$MyUserName-">>"$mythicalLibrarian"/output.log
 	echo "JOB: mythicalLibrarian '$InputPath' '$InputTitle' '$InputSubtitle'"
 	echo "LISTING INTERNAL VARIABLES USED BY mythicalLibrarian.">>"$mythicalLibrarian"/output.log
 	echo "INTERNET TIMEOUT:$Timeout- TVDB API KEY:$APIkey- mythicalLibrarian WORKING DIR:$mythicalLibrarian-">>"$mythicalLibrarian"/output.log
 	echo "MOVE DIR:$MoveDir- USING SHOWNAME AS FOLDER:$UseShowNameAsDir-">>"$mythicalLibrarian"/output.log
 	echo "FAILSAFE MODE:$FailSafeMode- FAILSAFE DIR:$FailSafeDir- ALTERNATE MOVE DIR:$AlternateMoveDir-">>"$mythicalLibrarian"/output.log
 	echo "USE ORIGINAL DIR:$UseOriginalDir NOTIFICATIONS:$Notify DEBUG MODE:$DEBUGMODE-">>"$mythicalLibrarian"/output.log
 	echo "INPUT SHOW NAME:$InputTitle- LOCAL SHOW NAME TRANSLATION:${showtranslation}- ShowName:$ShowName">>"$mythicalLibrarian"/output.log
 	echo "DATABASE UPDATED:$DatabaseWasUpdated- TVDB LAST UPDATED:$LastUpdated- CURRENT:$TvDbTime-">>"$mythicalLibrarian"/output.log
 	echo "RESOLVED SERIES ID:$seriesid- RESOVED SHOW NAME:$NewShowName-">>"$mythicalLibrarian"/output.log
 	echo "INPUT EPISODE NAME:$InputSubtitle- ABSOLOUTE EPISODE NUMBER:$absolouteEpisodeNumber- RESOLVED EPISODE NAME:$epn-">>"$mythicalLibrarian"/output.log
 	echo "SEASON:$sxx- EPISODE:$exx- SYMLINK MODE:$SYMLINK- FILESIZE: $MoveFileSize""kB-">>"$mythicalLibrarian"/output.log 
 	echo "CREATE AND DELETE FLAGS: ORIGINALDIR:$OriginalDirWritable- FREE:$OriginaldirFreeSpace""kB- WORKINGDIR:$WorkingDirWritable FREE:$WorkingDirFreeSpace""kB""-">>"$mythicalLibrarian"/output.log
	 echo "MOVEDIRWRITABLE:$MoveDirWritable- FREE:$MoveDirFreeSpace""kB- ALTERNATEMOVEDIR:$AlternateMoveDirWritable- FREE:$AlternateMoveDirFreeSpace""kB-">>"$mythicalLibrarian"/output.log
	 if [ "$Database" = "Enabled"	 ]; then
 		 echo "PRIMARYSHOWDIRWRITABLE:$PrimaryShowDirWritable-  FREE:$PrimaryShowDirFreeSpace""kB-""ALTERNATESHOWDIRWRITABLE:$AlternateShowDirWritable- FREE:$AlternateShowDirFreeSpace""kB-">>"$mythicalLibrarian"/output.log
		 echo "PRIMARYMOVIEDIRWRITABLE:$PrimaryMovieDirWritable- FREE:$PrimaryMovieDirFreeSpace""kB""- ALTERNATEMOVIEDIR:$AlternateMoveDirWritable- FREE:$AlternateMovieDirFreeSpace""kB""-">>"$mythicalLibrarian"/output.log
 		echo "DATABASE TYPE:$XMLTVGrabber-">>"$mythicalLibrarian"/output.log
		echo " RECSTART:$ShowStartTime- MOVIE YEAR:$MovieAirDate- ORIGINAL SERIES DATE:$OriginalAirDate-">>"$mythicalLibrarian"/output.log
 		echo " PROGRAMID:$ProgramID- CHANNEL ID:$ChanID- CATEGORY:$ShowCategory- GOFORDOOVER:$GoForDoover-">>"$mythicalLibrarian"/output.log
 		echo " EXTRAPOLATED DATA DETERMINED THIS RECORDING AS A:$ProgramIDType- STARS:$stars RATING:$rating">> "$mythicalLibrarian"/output.log
 		echo " ZAP2IT SERIES ID:$Zap2itSeriesID- MATCHED TVDB SERIES ID:$MatchedSeriesID-" >>"$mythicalLibrarian"/output.log
                echo PLOT: "$plot" >>"$mythicalLibrarian"/output.log
 	fi
 	echo "####################END OF DEBUG LOG#####################">>"$mythicalLibrarian"/output.log
  fi
 
 
 #####INVALID FILE HANDLING####
 #If file to be moved does not exist, then report
 if [ ! -f "$InputPath" ] && [ "$InputPath" != "testfile.ext" ]; then
 	echo "INPUT FILE NAME NON EXISTANT -CHECK FILE NAME AND READ PERMISSIONS"
 	echo "%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%">>"$mythicalLibrarian"/output.log
 	echo "%%%%%INPUT FILE NAME NON EXISTANT CHECK FILE NAME AND PERMISSIONS%%%%%%%%">>"$mythicalLibrarian"/output.log
 	echo "%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%">>"$mythicalLibrarian"/output.log
	echo "%%%%%%%%%%%%%%OPERATION FAILED" `date` "%%%%%%%%%%%%%%%%%">>"$mythicalLibrarian"/output.log
 	echo "mythicalLibrarian '$1' '$2' '$3'">>$mythicalLibrarian/doover.sh
 	if [ $Notify = Enabled ]; then
 	sudo -u "$NotifyUserName" /usr/local/bin/librarian-notify-send "mythicalLibrarian Error" "Invalid File supplied" error
 	fi
  	jobtype=InvalidFileNameSupplied
 	RunJob
 fi
 

 ######PRE-NAMING CHECKS#####
 if [ "$exx" = "" ] && [ "$mythicalLibrarianProgramIDCheck" != "SH" ] && [ "$mythicalLibrarianProgramIDCheck" != "MV" ] && [ "$InputPath" != "testfile.ext" ] ; then
 	if [ "$ShowStopper" = "Enabled" ]; then 

 		echo "%%%%%%%%%%www.TheTvDB.com information is incomplete $InputTitle, $InputSubtitle">>"$mythicalLibrarian"/output.log
 		echo "%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%">>"$mythicalLibrarian"/output.log
  		echo "%%%%%%%%%%%%Please consider helping out and adding to thetvdb%%%%%%%%%%%%">>"$mythicalLibrarian"/output.log
 		echo "%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%">>"$mythicalLibrarian"/output.log
 		echo "%%%%%%%%%%%%%%OPERATION FAILED" `date` "%%%%%%%%%%%%%%%%%">>"$mythicalLibrarian"/output.log
 		echo  "mythicalLibrarian '$1' '$2' '$3'">>$mythicalLibrarian/doover.sh
 		echo "ERROR: INFORMATION COULD NOT BE OBTAINED"
 		test "$Notify" = "Enabled" && sudo -u "$NotifyUserName" /usr/local/bin/librarian-notify-send "mythicalLibrarian Error" "Could not obtain information from server about: $InputTitle. TheTvDb is incomplete" web-browser
 	else

 #This marks Episodes as shows.  AKA EpiShows.  Episodes for which no information cannot be obtained currently.

 		test "$GoForDoover" = "1" &&  mythicalEpiShow=1
  		mythicalLibrarianProgramIDCheck=SH
 		echo "WARNING: EPISODE INFORMATION COULD NOT BE OBTAINED"
 		echo "HANDLING AS A GENERAL SHOWING"
 		echo "Please consider helping out and adding to thetvdb."
 		echo "WARNING:SHOW WAS CONSIDERED AN EPISODE BUT INFORMAITON WAS NOT OBTAINABLE">>"$mythicalLibrarian"/output.log
  		echo "%%%%%%%%%%%%Please consider helping out and adding to thetvdb%%%%%%%%%%%%">>"$mythicalLibrarian"/output.log
 		echo "HANDLING EPISODE AS GENERAL SHOWING AND DUMPING INTO --doover USER JOB">>"$mythicalLibrarian"/output.log
 	fi
 fi
 
 #Command line, no database Episodes: Determine where File will fit
 FailSafeState=0
 test "$MoveDirWritable" != "1" -a "$mythicalLibrarianProgramIDCheck" = "" && MoveDir="$AlternateMoveDir"
 test "$MoveDirWritable" != "1" -a "$mythicalLibrarianProgramIDCheck" = "" -a "$AlternateMoveDirWritable" != "1" && FailSafeState=1

 #Episode handling: Determine where File will fit
 test "$MoveDirWritable" != "1" -a "$mythicalLibrarianProgramIDCheck" = "EP" && MoveDir="$AlternateMoveDir"
 test "$MoveDirWritable" != "1" -a "$mythicalLibrarianProgramIDCheck" = "EP" -a "$AlternateMoveDirWritable" != "1" && FailSafeState=1
 
 #Movie handling: Determine where file will fit
 test "$mythicalLibrarianProgramIDCheck" = "MV" -a "$PrimaryMovieDirWritable" != "1" && PrimaryMovieDir="$AlternateMoveDir"
 test "$mythicalLibrarianProgramIDCheck" = "MV" -a "$PrimaryMovieDirWritable" != "1" -a "$AlternateMovieDirWritable" != "1" && FailSafeState=1

 #Show Handling: Determing Where File will fit
 test "$mythicalLibrarianProgramIDCheck" = "SH" -a "$PrimaryShowDirWritable" != "1" && PrimaryShowDir="$AlternateShowDir"
 test "$mythicalLibrarianProgramIDCheck" = "SH" -a "$PrimaryshowDirWritable" != "1" -a "$AlternateShowDirWritable" != "1" && FailSafeState=1
 
  
  
 #####OUTPUT FILE NAME FORMATTING#####
 #universally not accepted file system characters:  |\?*<":>+[]/ 
 #Format Shows
 epn=`echo $epn| tr -d '|\?*<":>+[]/'`
 NewShowName=`echo $NewShowName|tr -d '|\?*<":>+[]/'`
 ShowName=`echo $ShowName|tr -d '|\?*<":>+[]/'`
 
 #Format Episodes showname=show name sxx=season number exx=episode number epn=episode name
 if [ "$NamingConvention" = "" ]; then
 	TraditionalNamingConventions
 else
 	test "$NewShowName" = "" && NewShowName=$ShowName
 	CategoricNamingConventions
 	RequiresNFO=1
 fi
 

 #check to see if output folder exists
 test -d "$MoveDir" && echo "TARGET SET:$MoveDir/$ShowFileName"
 
 #If specified, make $movedir = $movedir/show name
 test "$UseShowNameAsDir" = "Enabled" && MoveDir=`echo "$MoveDir"/"$NewShowName"`
 
 
 #####MAKE FOLDER#####
 #Make the folder if it does not exist
 if [ ! -d "$MoveDir" ]; then
 	echo "CREATING FOLDER: $MoveDir">>"$mythicalLibrarian"/output.log
	echo "$MoveDir">>"$mythicalLibrarian"/dir.tracking
 	mkdir "$MoveDir"
 #Error message if folder was not created
 	if [ ! -d "$MoveDir" ];then
 		echo "COULD NOT CREATE $MoveDir/$NewShowName">>"$mythicalLibrarian"/output.log
 		echo "##########################################################">>"$mythicalLibrarian"/output.log
 		echo "#############FAILSAFE MODE HAS BEEN ACTIVATED#############">>"$mythicalLibrarian"/output.log
 		echo "##########################################################">>"$mythicalLibrarian"/output.log
 		if [ $Notify = "Enabled" ]; then
 			sudo -u "$NotifyUserName" /usr/local/bin/librarian-notify-send "mythicalLibrarian error" "failsafe mode activated."  error
 		fi
 		SYMLINK=LINK
 		MoveDir=$FailSafeDir
 	fi
 fi


 #####FAILSAFE HANDLING#####
 #If failsafe state is set then create link in FailSafeMode
 if [ $FailSafeState = "1" ]; then
  	echo "FAILSAFE FLAG WAS SET CHECK PERMISSIONS AND FOLDERS">>"$mythicalLibrarian"/output.log
 	echo "FAILSAFE FLAG WAS SET"
 	if [ $FailSafeMode = "Enabled" ]; then
 		echo "PERMISSION ERROR OR DRIVE FULL">>"$mythicalLibrarian"/output.log	
 		echo "ATTEMPTING SYMLINK TO FAILSAFE DIR: $FailSafeDir">>"$mythicalLibrarian"/output.log
 		echo "ATTEPMTING SYMLINK TO FAILSAFE DIR"
 		ln -s "$InputPath" "$FailSafeDir/$ShowFileName.$originalext"
 		test -f "$FailSafeDir/$ShowFileName.$originalext";echo "FAILSAFE MODE COMPLETE: SYMLINK CREATED">>"$mythicalLibrarian"/output.log
 		test ! -f "$FailSafeDir/$ShowFileName.$originalext"; echo "FAILSAFE MODE FAILURE CHECK PERMISSIONS AND FREE SPACE IN $FailSafeDir">>"$mythicalLibrarian"/output.log
 	fi
 
 	test $Notify = Enabled && sudo -u "$NotifyUserName" /usr/local/bin/librarian-notify-send "mythicalLibrarian FAILSAFE" "FAILSAFE mode active See "$mythicalLibrarian"/output.log for more information" error
 	echo "mythicalLibrarian '$1' '$2' '$3'">>$mythicalLibrarian/doover.sh
  	jobtype=FailSafeModeComplete
 	RunJob
 fi
 
 #####ANTI-CLOBBER#####	
 #If file exists then make a new name for it
 if [ -f "$MoveDir/$ShowFileName.$originalext" ]; then
 
 	mythicalLibrarianCounter=0
 	NameCheck=0
 	while [ $NameCheck = '0' ]; do
 		let mythicalLibrarianCounter=$mythicalLibrarianCounter+1
 	 
 #If file does not exist, then it is a valid target
 		if [ ! -f "$MoveDir/$ShowFileName-$mythicalLibrarianCounter.$originalext" ]; then 
 			NameCheck="1"
 			ShowFileName=`echo "$ShowFileName"-"$mythicalLibrarianCounter"`
 			echo "FILE NAME EXISTS.  FILE WILL BE KNOWN AS: $ShowFileName"
 		fi
 	done
  
 fi


 #For debugging purposes only
  test "$InputPath" = "testfile.ext" && exit 0
 
 #####SH Identification Type Handling #####
 #if the ProgramID does not meet criteria, then end the program
 	if [ "$mythicalLibrarianProgramIDCheck" = "SH" ]; then
 		echo "GENERIC GUIDE DATA WAS SUPPLIED TYPE: $ProgramIDType- $InputTitle, $InputSubtitle">>"$mythicalLibrarian"/output.log
 		echo "WARNING:%%%%%%%%%%PROGRAM GUIDE DATA IS NOT COMPLETE%%%%%%%%%%%%%%%%%%%%">>"$mythicalLibrarian"/output.log
 		
 	fi
 
 
 #####MOVE MODE HANDLING#####
 #If symlink is not in LINK mode, Move and rename the file.
 if [ "$SYMLINK" != "LINK" ]; then
 
 #Send notifications, Move the file and rename
 	echo "MOVING FILE: $InputPath to $MoveDir/$ShowFileName.$originalext">>"$mythicalLibrarian"/output.log
 	test "$Notify" = "Enabled" && sudo -u "$NotifyUserName" /usr/local/bin/librarian-notify-send "mythicalLibrarian Moving" "Moving and renaming $ShowFileName" drive-harddisk
 	mv "$InputPath" "$MoveDir/$ShowFileName.$originalext"
 
 #Check and report if file was moved
 	if [ -f "$MoveDir/$ShowFileName.$originalext" ]; then
 		if [ -s "$MoveDir/$ShowFileName.$originalext" ];then
 
 #Create Commercial skip data with file
 			if [ "$CommercialMarkup" = "Created" ]; then
 				mv "$mythicalLibrarian/markupframes.txt" "$MoveDir/$ShowFileName.txt"
 				echo "'$MoveDir/$ShowFileName.txt'" "'$MoveDir/$ShowFileName.$originalext'">>"$mythicalLibrarian"/created.tracking
 			fi
 
 #Make symlink back to original file
 			if [ "$SYMLINK" = "MOVE" ]; then
 				echo CREATING SYMLINK IN MOVE MODE
 				ln -s  "$MoveDir/$ShowFileName.$originalext" "$InputPath"
 				test ! -L "$InputPath" && echo "ERROR CREATING SYMLINK: FILESYSTEM MAY NOT SUPPORT SYMLINKS"
 				test ! -L "$InputPath" && echo "ERROR CREATING SYMLINK: FILESYSTEM MAY NOT SUPPORT SYMLINKS">>"$mythicalLibrarian"/output.log
  			fi
 
  		 	echo "@@@@@@@@@@@@@OPERATION COMPLETE" `date` "@@@@@@@@@@@@@@@@">>"$mythicalLibrarian"/output.log
 			echo "MOVED: $InputPath"
 			echo "TO: $MoveDir/$ShowFileName.$originalext "
 
 #If symlink=disabled, remove database entries
  			test "$SYMLINK" = "Disabled" && SYMLINKDisabled 
 
 #Send notification of completion and exit
 			test $Notify = "Enabled" && sudo -u "$NotifyUserName" /usr/local/bin/librarian-notify-send "mythicalLibrarian Sucess" "$ShowFileName moved to $MoveDir" info
 
 #Generate NFO files for shows
 	 	 	test  "$RequiresNFO" = "1" && GenerateTVShowNFO
 	 	 	test  "$RequiresNFO" = "1" && GenerateEpisodeNFO
   			XBMCAutomate 
 			performLoggingForMoveMode
 			dailyreport 
 			generaterss 
  			jobtype=MoveModeSuccessful		
 			RunJob
 
 #if file was not moved, then fail  
 		elif [ ! -s "$MoveDir/$ShowFileName.$originalext" ]; then
 			rm -f "$MoveDir/$ShowFileName.$originalext"
 			test $Notify = "Enabled" && sudo -u "$NotifyUserName" /usr/local/bin/librarian-notify-send "mythicalLibrarian Failure" "$ShowFileName could not be moved to $MoveDir" stop
 			echo "%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%">>"$mythicalLibrarian"/output.log
 			echo "%%%%%%%%%%%%%%%%%%%%%%%%%%%%%WROTE 0 LENGTH FILE%%%%%%%%%%%%%%%%%%%%%%%%%">>"$mythicalLibrarian"/output.log
 			echo "%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%">>"$mythicalLibrarian"/output.log
 			echo "%%%%%%%%%%%%%%OPERATION FAILED" `date` "%%%%%%%%%%%%%%%%%">>"$mythicalLibrarian"/output.log
 			jobtype=PermissionError0Length
 			RunJob

 		fi
 	elif [ ! -f "$MoveDir/$ShowFileName.$originalext" ]; then
  		echo "%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%">>"$mythicalLibrarian"/output.log
 		echo "%%%%%%%%%%%%%%%%%%%%PERMISSION ERROR WHILE MOVING%%%%%%%%%%%%%%%%%%%%%%%%">>"$mythicalLibrarian"/output.log
 		echo "%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%">>"$mythicalLibrarian"/output.log
 		echo "%%%%%%%%%%%%%%OPERATION FAILED" `date` "%%%%%%%%%%%%%%%%%">>"$mythicalLibrarian"/output.log
 		test $Notify = "Enabled" && sudo -u "$NotifyUserName" /usr/local/bin/librarian-notify-send "mythicalLibrarian Failure" "$ShowFileName could not be moved to $MoveDir" stop
 	  	jobtype=PermissionErrorWhileMoving
 		RunJob
 	fi
 

 #####LINK MODE HANDLING#####
 #If symlink is in LINK mode then create symlink
 elif [ "$SYMLINK" = "LINK" ]; then
 	echo "CREATING LINK IN LINK MODE"
 
 	ln -s "$InputPath" "$MoveDir/$ShowFileName.$originalext"     


 #if file was created
 	if [ -L "$MoveDir/$ShowFileName.$originalext" ]; then	
 		echo "Symlink created $MoveDir/$ShowFileName.$originalext">>"$mythicalLibrarian"/output.log
 		echo "@@@@@@@@@@@@@OPERATION COMPLETE" `date` "@@@@@@@@@@@@@@@@">>"$mythicalLibrarian"/output.log	
 		if [ "$Notify" = "Enabled" ]; then
 			sudo -u "$NotifyUserName" /usr/local/bin/librarian-notify-send "mythicalLibrarian Sucess" "$ShowFileName linked to $MoveDir" info
 		fi

 #Move comskip data
  	 	if [ "$CommercialMarkup" = "Created" ]; then
 			mv "$mythicalLibrarian"/markupframes.txt "$MoveDir/$ShowFileName.txt"
 			echo "$MoveDir/$ShowFileName.txt">>"$mythicalLibrarian"/created.tracking
 		fi

 	 	test  "$RequiresNFO" = "1"  && GenerateTVShowNFO
	 	test  "$RequiresNFO" = "1"  && GenerateEpisodeNFO 
 		XBMCAutomate 
 		performLoggingForLinkMode
 		dailyreport
 		generaterss
   		jobtype=LinkModeSuccessful		
 		RunJob
 
 #If link failure, send notification and fail
 	elif [ ! -L "$MoveDir/$ShowFileName.$originalext" ]; then
 		echo "PERMISSION ERROR OR FILE SYSTEM DOES NOT SUPPORT SYMLINKS:$MoveDir"
 		echo "%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%">>"$mythicalLibrarian"/output.log
 		echo "%%%%%%%%%%%%%%%LINK PERMISSION ERROR: SYMLINK NOT CREATED%%%%%%%%%%%%%%%%">>"$mythicalLibrarian"/output.log
 		echo "%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%">>"$mythicalLibrarian"/output.log
 		echo "%%%%%%%%%%%%%%OPERATION FAILED" `date` "%%%%%%%%%%%%%%%%%">>"$mythicalLibrarian"/output.log
 		test $Notify = "Enabled" &&	sudo -u "$NotifyUserName" /usr/local/bin/librarian-notify-send "mythicalLibrarian error" "Failure while creating link. Check permissions" error
 		echo "mythicalLibrarian '$1' '$2' '$3'">>$mythicalLibrarian/doover.sh
 	fi
 	jobtype=LinkModeFailed
	RunJob

 fi 
 
 #####GENERIC UNSPECIFIED ERROR#####
 #if no match is found then send error messages
 if [ "$exx" = "" ]; then 
 	echo "NO MATCH FOUND.  TROUBLESHOOTING: Check www.TheTvDb TO SEE IF $InputTitle EXISTS. ">>"$mythicalLibrarian"/output.log
 	echo "CHECK EPISODE NAME $InputSubtitle. CHECK INTERNET CONNECTION. CHECK API KEY.">>"$mythicalLibrarian"/output.log
 	echo "NOT ENOUGH INFORMATION PULLED FROM DATABASE TO IDENTIFY FILE AS MOVIE OR EPISODE">>"$mythicalLibrarian"/output.log
 	echo "CHECK www.TheTvDb.com  RUN mythicalLibrarian LINK COMMAND PROMPT.">>"$mythicalLibrarian"/output.log
 	echo "FOR MORE INFORMATION SEE http://xbmc.org/wiki/index.php?title=mythicalLibrarian">>"$mythicalLibrarian"/output.log
 	echo "%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%">>"$mythicalLibrarian"/output.log
 	echo "%%%%%%%%%%%%%%OPERATION FAILED" `date` "%%%%%%%%%%%%%%%%%">>"$mythicalLibrarian/output.log">>"$mythicalLibrarian"/output.log
 fi
 
 
 #send notification if enabled
 test $Notify = "Enabled" && sudo -u "$NotifyUserName" /usr/local/bin/librarian-notify-send "mythicalLibrarian error" "mythicalLibrarian operation failed See "$mythicalLibrarian"/output.log for more information" error
 echo "mythicalLibrarian '$1' '$2' '$3'">>$mythicalLibrarian/doover.sh
 jobtype=GenericUnspecifiedError
 RunJob

Exit 4
